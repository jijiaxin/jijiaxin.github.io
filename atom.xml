<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>微凉一季</title>
  <subtitle>　　26+1岁了，改掉坏习惯，做一个好人，一个正直的人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jijiaxin89.com/"/>
  <updated>2017-03-15T18:12:15.000Z</updated>
  <id>http://jijiaxin89.com/</id>
  
  <author>
    <name>季訫</name>
    <email>jijiaxin1989@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello</title>
    <link href="http://jijiaxin89.com/2017/03/16/hello/"/>
    <id>http://jijiaxin89.com/2017/03/16/hello/</id>
    <published>2017-03-15T18:11:17.000Z</published>
    <updated>2017-03-15T18:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>test </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;test &lt;/p&gt;

    
    </summary>
    
      <category term="test" scheme="http://jijiaxin89.com/categories/test/"/>
    
    
      <category term="test" scheme="http://jijiaxin89.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>即将新的开始</title>
    <link href="http://jijiaxin89.com/2016/05/16/%E5%8D%B3%E5%B0%86%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://jijiaxin89.com/2016/05/16/即将新的开始/</id>
    <published>2016-05-16T05:58:52.000Z</published>
    <updated>2017-03-15T16:50:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近好久没写博客了，忙着面试，预计未来的一段时间，也不会清闲。</p>
<p>职业规划，这是我工作以来一直就在回避的一个事儿，我一直过得比较随性洒脱，也没有什么特别宏伟的抱负，小时候的梦，也早就消磨的没了原始的形状，我骨子里一直有一种隐士的情怀。但是，人终究是在这个社会，不是为了自己而活，最近年，我也时常感觉到了肩上的责任，越来越多，需要对得起的,照顾的人，也越来越多。终究是岁月不饶人，父母的逐渐年迈，自己的不再年少，想到一句话，成功要乘早，现在已经时不我待了…必须要加油。让亲人享福，不能只是一句空话，和一种不着边际的愿望，要兑现啊。<br><a id="more"></a><br>远在异乡，就越感觉到家的意义。中学很多课文，《背影》《故乡》等，尤其是迅哥儿的好多文章，学的时候似懂非懂，现在重读时常会有泪眼婆娑的深切体会。其实中学课本上很多经典课文，没有一些经历是不能读懂作者的情感的。</p>
<p>最近的面试，整体来说比预想的要好一些，毕竟错过了三四月的黄金季，五一回来开始着手面试，可能打心底还是比较留恋的，简历也没有好好写，然而基本上给面试机会的，都通过了，也有几个一二线大厂，虽说工作强度会比较大，但是我还年轻，有精力磨砺磨砺。</p>
<p>我是个梦想主义，对于现实生活总是习惯在想象中美化一下，不太愿意面对赤裸裸的生活琐事。也会时常偷懒，埋进自己的理想国中宅着。借这个新的开始，我觉得这些方方面面都会做些调整，如哥本华所言：认清生活的真相，然后依然热爱它。</p>
<p>最近看到一句话，很喜欢：<br>年少无忌，老来无悔。</p>
<p>似乎可以累加进我的座右铭了：<br>往事如烟，随风而逝。<br>心无所恃，随遇而安。<br>心有猛虎，细嗅蔷薇。<br>但行好事，莫问前程。<br>年少无忌，老来无悔。</p>
<p>做座右铭，太长了吧！算是生活经验的总结和积累吧！</p>
<p>梦想如大海，信仰如星辰，不论风雨兼程，我都要追求星辰和大海。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近好久没写博客了，忙着面试，预计未来的一段时间，也不会清闲。&lt;/p&gt;
&lt;p&gt;职业规划，这是我工作以来一直就在回避的一个事儿，我一直过得比较随性洒脱，也没有什么特别宏伟的抱负，小时候的梦，也早就消磨的没了原始的形状，我骨子里一直有一种隐士的情怀。但是，人终究是在这个社会，不是为了自己而活，最近年，我也时常感觉到了肩上的责任，越来越多，需要对得起的,照顾的人，也越来越多。终究是岁月不饶人，父母的逐渐年迈，自己的不再年少，想到一句话，成功要乘早，现在已经时不我待了…必须要加油。让亲人享福，不能只是一句空话，和一种不着边际的愿望，要兑现啊。&lt;br&gt;
    
    </summary>
    
      <category term="文艺小栈" scheme="http://jijiaxin89.com/categories/%E6%96%87%E8%89%BA%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="印记" scheme="http://jijiaxin89.com/tags/%E5%8D%B0%E8%AE%B0/"/>
    
      <category term="文学" scheme="http://jijiaxin89.com/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>视频分片加密技术</title>
    <link href="http://jijiaxin89.com/2016/04/25/%E8%A7%86%E9%A2%91%E5%88%86%E7%89%87%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    <id>http://jijiaxin89.com/2016/04/25/视频分片加密技术/</id>
    <published>2016-04-25T12:20:59.000Z</published>
    <updated>2017-03-15T16:50:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_68bbfd3101017n99.html" target="_blank" rel="external">视频分片加密技术</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_68bbfd3101017n99.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视频分片加密技术&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android技术小栈" scheme="http://jijiaxin89.com/categories/Android%E6%8A%80%E6%9C%AF%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Android与javaScript的交互</title>
    <link href="http://jijiaxin89.com/2016/04/08/Android%E4%B8%8EjavaScript%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>http://jijiaxin89.com/2016/04/08/Android与javaScript的交互/</id>
    <published>2016-04-08T08:55:39.000Z</published>
    <updated>2017-03-15T16:50:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>WebView与js的交互包含两方面,一是在html中通过js调用java代码；二是在安卓java代码中调用js。</p>
<h3 id="一、html中通过js调用java代码"><a href="#一、html中通过js调用java代码" class="headerlink" title="一、html中通过js调用java代码"></a>一、html中通过js调用java代码</h3><p>js中调用java代码其实就记住一点，WebView设置一个和js交互的接口（这里的接口是一般的意思，不是java中接口的含义），这个接口其实就是一个一般的类，同时为这个接口取一个别名。这个过程如下：<br><code>mWebView.addJavaScriptInterface(new DemoJavaScriptInterface(),&quot;demo&quot;);</code><br><code>new DemoJavaScriptInterface()</code>就是这个接口，demo就是这个接口的别名。<br>上面的代码执行后在html中js就能通过别名（这里是“demo”）来调用<code>DemoJavaScriptInterface</code>类中的任何方法了。<br><a id="more"></a><br>如果我们想让html中的一个button点击之后调用java中的函数可以这样：<br><code>&lt;input type=&quot;button&quot; value=&quot;click me&quot; onclick=&quot;window.demo.clickOnAndroid()&quot;/&gt;</code><br>但是因为安全问题，在Android4.2中（如果应用的android:targetSdkVersion为17+）JS只能访问带有@javaScriptInterface注解的java函数，所以开发版本较高的时候，在需要被调用的函数前加上这个注解。4.2以下为了安全尽量不要调用addJavascriptInterface，需要另谋他法。<br>下面是google官方给的实例：<br><code>WebViewDemo.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">package com.google.android.webviewdemo;</div><div class="line">import android.app.Activity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.os.Handler;</div><div class="line">import android.util.Log;</div><div class="line">import android.webkit.JsResult;</div><div class="line">import android.webkit.WebChromeClient;</div><div class="line">import android.webkit.WebSettings;</div><div class="line">import android.webkit.WebView;</div><div class="line">/**</div><div class="line"> * Demonstrates how to embed a WebView in your activity. Also demonstrates how</div><div class="line"> * to have javascript in the WebView call into the activity, and how the activity</div><div class="line"> * can invoke javascript.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * In this example, clicking on the android in the WebView will result in a call into</div><div class="line"> * the activities code in &#123;@link DemoJavaScriptInterface#clickOnAndroid()&#125;. This code</div><div class="line"> * will turn around and invoke javascript using the &#123;@link WebView#loadUrl(String)&#125;</div><div class="line"> * method.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * Obviously all of this could have been accomplished without calling into the activity</div><div class="line"> * and then back into javascript, but this code is intended to show how to set up the</div><div class="line"> * code paths for this sort of communication.</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class WebViewDemo extends Activity &#123;</div><div class="line">    private static final String LOG_TAG = &quot;WebViewDemo&quot;;</div><div class="line">    private WebView mWebView;</div><div class="line">    private Handler mHandler = new Handler();</div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle icicle) &#123;</div><div class="line">        super.onCreate(icicle);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        mWebView = (WebView) findViewById(R.id.webview);</div><div class="line">        WebSettings webSettings = mWebView.getSettings();</div><div class="line">        webSettings.setSavePassword(false);</div><div class="line">        webSettings.setSaveFormData(false);</div><div class="line">        webSettings.setJavaScriptEnabled(true);</div><div class="line">        webSettings.setSupportZoom(false);</div><div class="line">        mWebView.setWebChromeClient(new MyWebChromeClient());</div><div class="line">        mWebView.addJavascriptInterface(new DemoJavaScriptInterface(), &quot;demo&quot;);</div><div class="line">        mWebView.loadUrl(&quot;file:///android_asset/demo.html&quot;);</div><div class="line">    &#125;</div><div class="line">    final class DemoJavaScriptInterface &#123;</div><div class="line">        DemoJavaScriptInterface() &#123;</div><div class="line">        &#125;</div><div class="line">        /**</div><div class="line">         * This is not called on the UI thread. Post a runnable to invoke</div><div class="line">         * loadUrl on the UI thread.</div><div class="line">         */</div><div class="line">        public void clickOnAndroid() &#123;</div><div class="line">            mHandler.post(new Runnable() &#123;</div><div class="line">                public void run() &#123;</div><div class="line">                    mWebView.loadUrl(&quot;javascript:wave()&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * Provides a hook for calling &quot;alert&quot; from javascript. Useful for</div><div class="line">     * debugging your javascript.</div><div class="line">     */</div><div class="line">    final class MyWebChromeClient extends WebChromeClient &#123;</div><div class="line">        @Override</div><div class="line">        public boolean onJsAlert(WebView view, String url, String message, JsResult result) &#123;</div><div class="line">            Log.d(LOG_TAG, message);</div><div class="line">            result.confirm();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>demo.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;script language=&quot;javascript&quot;&gt;</div><div class="line">        /* This function is invoked by the activity */</div><div class="line">        function wave() &#123;</div><div class="line">            alert(&quot;1&quot;);</div><div class="line">            document.getElementById(&quot;droid&quot;).src=&quot;android_waving.png&quot;;</div><div class="line">            alert(&quot;2&quot;);</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;!-- Calls into the javascript interface for the activity --&gt;</div><div class="line">        &lt;a onClick=&quot;window.demo.clickOnAndroid()&quot;&gt;</div><div class="line">            &lt;div style=&quot;width:80px;</div><div class="line">                margin:0px auto;</div><div class="line">                padding:10px;</div><div class="line">                text-align:center;</div><div class="line">                border:2px solid #202020;&quot; &gt;</div><div class="line">                &lt;img id=&quot;droid&quot; src=&quot;android_normal.png&quot;/&gt;&lt;br&gt;</div><div class="line">                Click me!</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/a&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><code>main.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:layout_width=&quot;fill_parent&quot;</div><div class="line">    android:layout_height=&quot;fill_parent&quot;</div><div class="line">    &gt;</div><div class="linediv><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;fill_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;@string/intro&quot;</div><div class="line">        android:padding=&quot;4dip&quot;</div><div class="line">        android:textSize=&quot;16sp&quot;</div><div class="line">        /&gt;</div><div class="linediv><div class="line">    &lt;WebView</div><div class="line">        android:id=&quot;@+id/webview&quot;</div><div class="line">        android:layout_width=&quot;fill_parent&quot;</div><div class="line">        android:layout_height=&quot;0dip&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        /&gt;</div><div class="line">                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Android调用js"><a href="#Android调用js" class="headerlink" title="Android调用js"></a>Android调用js</h3><p>调用webview页面内的js方法,调用形式：<br><code>mWebView.loadUrl(&quot;javascript:wave()&quot;);</code><br>其中wave()是js中的一个方法，当然你可以把这个方法改成其他的方法，也就是android调用其他的方法。但java不能直接获取Js方法的返回结果。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>具体交互流程如下：</p>
<ul>
<li>点击图片，则在js端直接调用android上的方法clickOnAndroid()；</li>
<li>clickOnAndroid()方法（利用线程）调用js的方法。</li>
<li>被调用的js直接控制html。</li>
</ul>
<p>利用webView的这种方式在有些时候UI布局就可以转成相应的html代码编写了，而html布局样式之类有DW这样强大的工具，而且网上很多源码，很多代码片。在UI和视觉效果上就会节省很多时间，重复发明轮子没有任何意义。</p>
<h3 id="交互结果"><a href="#交互结果" class="headerlink" title="交互结果"></a>交互结果</h3><p>Android Webview中Java调用Js方法很容易，<code>loadUrl(&quot;javascript:isOk()&quot;)</code>就可以调用isOk这个Js方法，但不能直接获取Js方法的返回结果。<br>1.传统的方法中，Js获取Java信息可以采用如下方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class JsObject &#123;</div><div class="line">      @JavascriptInterface</div><div class="line">      public String toString() &#123; return &quot;injectedObject&quot;; &#125;</div><div class="line">   &#125;</div><div class="line">webView.addJavascriptInterface(new JsObject(), &quot;injectedObject&quot;);</div><div class="line">webView.loadData(&quot;&quot;, &quot;text/html&quot;, null);</div><div class="line">webView.loadUrl(&quot;javascript:alert(injectedObject.toString())&quot;);</div></pre></td></tr></table></figure></p>
<p>2.Java获取Js信息（如通过Js获取网页源代码）可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import android.app.Activity;</div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.util.Log;</div><div class="line">import android.webkit.WebView;</div><div class="line">import android.webkit.WebViewClient;</div><div class="line"></div><div class="line">public class HtmlSource extends Activity &#123;</div><div class="line">    private WebView webView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        webView = (WebView)findViewById(R.id.webview);</div><div class="line">        webView.getSettings().setJavaScriptEnabled(true);</div><div class="line">        webView.addJavascriptInterface(new InJavaScriptLocalObj(), &quot;local_obj&quot;);</div><div class="line">        webView.setWebViewClient(new MyWebViewClient());</div><div class="line">        webView.loadUrl(&quot;http://www.cnblogs.com/hibraincol/&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">   final class MyWebViewClient extends WebViewClient&#123;  </div><div class="line">        public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;   </div><div class="line">            view.loadUrl(url);   </div><div class="line">            return true;   </div><div class="line">        &#125;  </div><div class="line">        public void onPageStarted(WebView view, String url, Bitmap favicon) &#123;</div><div class="line">            Log.d(&quot;WebView&quot;,&quot;onPageStarted&quot;);</div><div class="line">            super.onPageStarted(view, url, favicon);</div><div class="line">        &#125;    </div><div class="line">        public void onPageFinished(WebView view, String url) &#123;</div><div class="line">            Log.d(&quot;WebView&quot;,&quot;onPageFinished &quot;);</div><div class="line">            view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+&quot; +</div><div class="line">                &quot;document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div><div class="line">            super.onPageFinished(view, url);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    final class InJavaScriptLocalObj &#123;</div><div class="line"></div><div class="line">        public void showSource(String html) &#123;</div><div class="line">            Log.d(&quot;HTML&quot;, html);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当网页中有超链接跳转时，将会调用WebClient的<code>shouldOverrideUrlLoading</code>方法，若设置 WebViewClient 且该方法返回 true，则说明由应用的代码处理该 url，WebView 不处理，就可以达到拦截跳转的效果。</p>
<p>原文出处：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0912/1542.html" target="_blank" rel="external">安卓中webview与javascript的交互</a><br><a href="http://jiajixin.cn/2014/09/16/webview-js-safety/" target="_blank" rel="external">Android Webview Java和Javascript安全交互</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebView与js的交互包含两方面,一是在html中通过js调用java代码；二是在安卓java代码中调用js。&lt;/p&gt;
&lt;h3 id=&quot;一、html中通过js调用java代码&quot;&gt;&lt;a href=&quot;#一、html中通过js调用java代码&quot; class=&quot;headerlink&quot; title=&quot;一、html中通过js调用java代码&quot;&gt;&lt;/a&gt;一、html中通过js调用java代码&lt;/h3&gt;&lt;p&gt;js中调用java代码其实就记住一点，WebView设置一个和js交互的接口（这里的接口是一般的意思，不是java中接口的含义），这个接口其实就是一个一般的类，同时为这个接口取一个别名。这个过程如下：&lt;br&gt;&lt;code&gt;mWebView.addJavaScriptInterface(new DemoJavaScriptInterface(),&amp;quot;demo&amp;quot;);&lt;/code&gt;&lt;br&gt;&lt;code&gt;new DemoJavaScriptInterface()&lt;/code&gt;就是这个接口，demo就是这个接口的别名。&lt;br&gt;上面的代码执行后在html中js就能通过别名（这里是“demo”）来调用&lt;code&gt;DemoJavaScriptInterface&lt;/code&gt;类中的任何方法了。&lt;br&gt;
    
    </summary>
    
      <category term="Android技术小栈" scheme="http://jijiaxin89.com/categories/Android%E6%8A%80%E6%9C%AF%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>走走行行(生活壹)</title>
    <link href="http://jijiaxin89.com/2016/04/03/%E8%B5%B0%E8%B5%B0%E8%A1%8C%E8%A1%8C-%E7%94%9F%E6%B4%BB%E5%A3%B9/"/>
    <id>http://jijiaxin89.com/2016/04/03/走走行行-生活壹/</id>
    <published>2016-04-03T09:44:10.000Z</published>
    <updated>2017-03-15T16:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-3号-周天"><a href="#4-3号-周天" class="headerlink" title="4/3号  周天"></a>4/3号  周天</h3><p>最近没闲着，就没静思。<br>去年图便宜买的个联想小新的笔记本，全高清屏的，适配太渣，基本没法用，买了就一直搁那吃灰了，一年了使用时长不到100小时吧，刚好换了公司就一直在用着公司的电脑，现在想把自己的博客存档啥的弄出来，才又找出那个本，本来还心存幻想，结果属实是无法使用。以前一直对mac不感冒来着，现在想想好像还是买个贵点的值当。。。</p>
<p>昨天看了海棠，丁香，樱花等。可惜的是总是分不清哪个是哪个。<br>张爱玲曰人生三恨:一恨海棠无香,二恨鲥鱼多刺,三恨红楼梦未完。</p>
<a id="more"></a>
<p>陶醉于胜屿的《心若孤城》 这一首歌。</p>
<p>我博客很少用图片了，因为之前被七牛图床坑过一次，流量过大，一下就欠费了。算了，就纯文字好了，也挺干净的。<br>最近这几个月，多事之秋，时间也没有很好地把握住，要专注一下啊！静心做个技术人。</p>
<p>爱是相互的是吗，爱是自私的是吗，爱是独享的是吗。。？？<br>自己无所谓了啊，提高亲人的生活质量，有时候觉得在提高亲人生活质量之前提高自己的生活质量有一种负罪感。。。。<br>唉</p>
<h3 id="4-4号-周一-清明假最后一天"><a href="#4-4号-周一-清明假最后一天" class="headerlink" title="4/4号  周一  清明假最后一天"></a>4/4号  周一  清明假最后一天</h3><p>今天一早起来，换上运动的衣服，小跑了一小段路，然后去小豆看着意林喝了个地瓜粥，释放一下。</p>
<p>开始学习了。come on。</p>
<h3 id="4-11号-周一-这周末公司要去山西玩"><a href="#4-11号-周一-这周末公司要去山西玩" class="headerlink" title="4/11号  周一  这周末公司要去山西玩"></a>4/11号  周一  这周末公司要去山西玩</h3><p>身体疏于运动，最近累的不行，回家基本倒头便睡，没法像之前那样可以躺在床上看文章到一点甚至两点而不困的了。<br>最近经常提醒自己要调高个人竞争力，抓紧时间学习啊，可就是没有腾出时间来好好学习，所以就要从白天的时间来下手了，下一步要努力提高上班时间的工作效率，尽量从这块节省出来时间。其实最近是很没有效率，这块应该提升空间不小，加油。</p>
<h3 id="4-14号-周四"><a href="#4-14号-周四" class="headerlink" title="4/14号  周四"></a>4/14号  周四</h3><p>看一个作家的水平，不是看他发表了多少文字，而要看他的废纸篓里扔掉了多少。</p>
<h3 id="4-19号-周二"><a href="#4-19号-周二" class="headerlink" title="4/19号 周二"></a>4/19号 周二</h3><p>最近状态不好啊。</p>
<h3 id="4-21号-周四"><a href="#4-21号-周四" class="headerlink" title="4/21号 周四"></a>4/21号 周四</h3><p>他日若遂凌云志，敢笑黄巢不丈夫。<br>最近心情烦躁的很，调整调整啊，god。。。</p>
<h3 id="4-25号-周一"><a href="#4-25号-周一" class="headerlink" title="4/25号 周一"></a>4/25号 周一</h3><p>叔叔，婶婶。今早知悉。<br>生命不能承受之轻。</p>
<h3 id="4-29号-周五"><a href="#4-29号-周五" class="headerlink" title="4/29号 周五"></a>4/29号 周五</h3><p>今天下班就五一放假了，回家。。。人们似乎都是一直在路上。。。</p>
<h3 id="5-6号-周五"><a href="#5-6号-周五" class="headerlink" title="5/6号 周五"></a>5/6号 周五</h3><p>今天收到</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;4-3号-周天&quot;&gt;&lt;a href=&quot;#4-3号-周天&quot; class=&quot;headerlink&quot; title=&quot;4/3号  周天&quot;&gt;&lt;/a&gt;4/3号  周天&lt;/h3&gt;&lt;p&gt;最近没闲着，就没静思。&lt;br&gt;去年图便宜买的个联想小新的笔记本，全高清屏的，适配太渣，基本没法用，买了就一直搁那吃灰了，一年了使用时长不到100小时吧，刚好换了公司就一直在用着公司的电脑，现在想把自己的博客存档啥的弄出来，才又找出那个本，本来还心存幻想，结果属实是无法使用。以前一直对mac不感冒来着，现在想想好像还是买个贵点的值当。。。&lt;/p&gt;
&lt;p&gt;昨天看了海棠，丁香，樱花等。可惜的是总是分不清哪个是哪个。&lt;br&gt;张爱玲曰人生三恨:一恨海棠无香,二恨鲥鱼多刺,三恨红楼梦未完。&lt;/p&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>写写记记(学习壹)</title>
    <link href="http://jijiaxin89.com/2016/04/03/%E5%86%99%E5%86%99%E8%AE%B0%E8%AE%B0-%E5%AD%A6%E4%B9%A0%E5%A3%B9/"/>
    <id>http://jijiaxin89.com/2016/04/03/写写记记-学习壹/</id>
    <published>2016-04-03T09:41:36.000Z</published>
    <updated>2017-03-15T16:50:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>js开发  NDK开发  算法、数据结构 …挤时间吧少年。</p>
<h3 id="4-7号-周四"><a href="#4-7号-周四" class="headerlink" title="4/7号  周四"></a>4/7号  周四</h3><p>解决finish activity时videoview变透明<br>开始先给videoview的背景设为黑色，加载好后，再设为透明就好了（不设透明无法显示播放内容）</p>
<p>Does EditText.getText() ever returns null? no，只会是空串””. EditText继承自TextView，mText在构造方法中就被初始化为””了.</p>
<p>AS的预览界面 选中布局Ctrl+B 跳到对应的代码那</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 手机号规则</div><div class="line"> * 也可以更为严苛的  ^(13[0-9]|15[0-9]|18[0-9]|17[0-9]|147)\d&#123;8&#125;$，</div><div class="line"> * 考虑到手机号段会更新，前端用这个够了，其他交给服务器</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMobileNumber</span><span class="params">(String phoneNum)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(phoneNum != <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> phoneNum.matches(<span class="string">"^(1[34578][0-9])\\d&#123;8&#125;$"</span>);</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>获取anr日志,不需要root权限,命令如下:<br>adb pull /data/anr/traces.txt D:\新需求\imooc-4.2\android         </p>
<p>ANR一般有三种类型：<br>1：KeyDispatchTimeout(5 seconds) –主要类型<br>按键或触摸事件在特定时间内无响应<br>2：BroadcastTimeout(10 seconds)<br>BroadcastReceiver在特定时间内无法处理完成<br>3：ServiceTimeout(20 seconds) –小概率类型<br>Service在特定的时间内无法处理完成<br><a href="http://blog.csdn.net/itachi85/article/details/6918761" target="_blank" rel="external">如何分析Anr</a></p>
<h3 id="4-13号-周三"><a href="#4-13号-周三" class="headerlink" title="4/13号  周三"></a>4/13号  周三</h3><p><code>&amp;#160;</code> 表示一个空格</p>
<p>CMWAP 和 CMNET 只是中国移动人为划分的两个GPRS接入方式。前者是为手机WAP上网而设立的，后者则主要是为PC、笔记本电脑、PDA等利用GPRS上网服务。它们在实现方式上并没有任何差别，但因为定位不同，所以和CMNET相比，CMWAP便有了部分限制，资费上也存在差别。 </p>
<p>避免使用自增减表达式（i++，++i，i–，–i）。这种自增减操作表达式其实是历史遗留的设计失误。它们含义蹊跷，非常容易弄错。它们把读和写这两种完全不同的操作，混淆缠绕在一起，把语义搞得乌七八糟。含有它们的表达式，结果可能取决于求值顺序，所以它可能在某种编译器下能正确运行，换一个编译器就出现离奇的错误。<br>比如，如果你想写foo(i++)，你完全可以把它拆成int t = i; i += 1; foo(t);。如果你想写foo(++i)，可以拆成i += 1; foo(i); 拆开之后的代码，含义完全一致，却清晰很多。<br>有人也许以为i++或者++i的效率比拆开之后要高，这只是一种错觉。这些代码经过基本的编译器优化之后，生成的机器代码是完全没有区别的。自增减表达式只有在两种情况下才可以安全的使用。一种是在for循环的update部分，比如for(int i = 0; i &lt; 5; i++)。另一种情况是写成单独的一行，比如i++;。这两种情况是完全没有歧义的。你需要避免其它的情况，比如用在复杂的表达式里面，比如foo(i++)，foo(++i) + foo(i)，…… 没有人应该知道，或者去追究这些是什么意思。<br><a href="http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy" target="_blank" rel="external"></a></p>
<p>遍历集合的时候不可进行删除操作，不然会报ConcurrentModification异常。</p>
<p>notifyDataSetInvalidated()，会重绘控件（还原到初始状态）  数据集不再有效了<br>notifyDataSetChanged()，重绘当前可见区域    数据集改变了 </p>
<h3 id="5-10号-周二"><a href="#5-10号-周二" class="headerlink" title="5/10号  周二"></a>5/10号  周二</h3><p>泛型相关<br><a href="http://kaywu.github.io/2016/03/06/Java-Generic/" target="_blank" rel="external">http://kaywu.github.io/2016/03/06/Java-Generic/</a><br>泛型中PECS原则表示producer-extends，consumer-super。<br>如果从集合中读取类型T的数据，不需要写入（因为写不进去），使用extends。<br>如果要从集合中写入类型T的数据，不需要读取（因为读不出来），使用super。</p>
<h3 id="5-10号-周二-1"><a href="#5-10号-周二-1" class="headerlink" title="5/10号  周二"></a>5/10号  周二</h3><p>序列化<br><a href="http://www.cnblogs.com/xyczero/p/4021245.html" target="_blank" rel="external">http://www.cnblogs.com/xyczero/p/4021245.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js开发  NDK开发  算法、数据结构 …挤时间吧少年。&lt;/p&gt;
&lt;h3 id=&quot;4-7号-周四&quot;&gt;&lt;a href=&quot;#4-7号-周四&quot; class=&quot;headerlink&quot; title=&quot;4/7号  周四&quot;&gt;&lt;/a&gt;4/7号  周四&lt;/h3&gt;&lt;p&gt;解决finish activity时videoview变透明&lt;br&gt;开始先给videoview的背景设为黑色，加载好后，再设为透明就好了（不设透明无法显示播放内容）&lt;/p&gt;
&lt;p&gt;Does EditText.getText() ever returns null? no，只会是空串””. EditText继承自TextView，mText在构造方法中就被初始化为””了.&lt;/p&gt;
&lt;p&gt;AS的预览界面 选中布局Ctrl+B 跳到对应的代码那&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 手机号规则&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 也可以更为严苛的  ^(13[0-9]|15[0-9]|18[0-9]|17[0-9]|147)\d&amp;#123;8&amp;#125;$，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 考虑到手机号段会更新，前端用这个够了，其他交给服务器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isMobileNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String phoneNum)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(phoneNum != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; phoneNum.matches(&lt;span class=&quot;string&quot;&gt;&quot;^(1[34578][0-9])\\d&amp;#123;8&amp;#125;$&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>面试中常见问题汇总</title>
    <link href="http://jijiaxin89.com/2016/03/25/%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://jijiaxin89.com/2016/03/25/面试中常见问题汇总/</id>
    <published>2016-03-25T02:50:57.000Z</published>
    <updated>2017-03-15T16:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java相关问题"><a href="#Java相关问题" class="headerlink" title="Java相关问题"></a>Java相关问题</h2><h4 id="JVM自动内存管理，Minor-GC与Full-GC的触发机制"><a href="#JVM自动内存管理，Minor-GC与Full-GC的触发机制" class="headerlink" title="JVM自动内存管理，Minor GC与Full GC的触发机制"></a>JVM自动内存管理，Minor GC与Full GC的触发机制</h4><p>堆内存划分为 Eden、Survivor 和 Tenured/Old 空间。<br>从年轻代空间（包括 Eden 和 Survivor 区域）回收内存被称为 Minor GC。<br>当 JVM 无法为一个新的对象分配空间时会触发 Minor GC，比如当 Eden 区满了。所以分配率越高，越频繁执行 Minor GC。执行 Minor GC 操作时，不会影响到永久代。从永久代到年轻代的引用被当成 GC roots，从年轻代到永久代的引用在标记阶段被直接忽略掉。<br>总结：每次 Minor GC 会清理年轻代的内存。Major GC 是清理永久代。<br>Full GC 是清理整个堆空间—包括年轻代和永久代。<br><a href="http://www.importnew.com/15820.html" target="_blank" rel="external">Minor GC、Major GC和Full GC之间的区别</a></p>
<a id="more"></a>
<h4 id="段页式存储的区别"><a href="#段页式存储的区别" class="headerlink" title="段页式存储的区别"></a>段页式存储的区别</h4><p>页式和段式系统有许多相似之处。比如，两者都采用离散分配方式，且都通过地址映射机构来实现地址变换。但概念上两者也有很多区别，主要表现在：<br>·页是信息的物理单位，分页是为了实现离散分配方式，以减少内存的外零头，提高内存的利用率。或者说，分页仅仅是由于系统管理的需要，而不是用户的需要。段是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了更好地满足用户的需要。<br>·页的大小固定且由系统决定，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的。段的长度不固定，且决定于用户所编写的程序，通常由编译系统在对源程序进行编译时根据信息的性质来划分。<br>·页式系统地址空间是一维的，即单一的线性地址空间，程序员只需利用一个标识符，即可表示一个地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。<br><a href="http://www.cnblogs.com/yunsicai/p/3326105.html" target="_blank" rel="external">段式和页式管理的区别</a></p>
<h4 id="Lucene全文搜索的基本原理"><a href="#Lucene全文搜索的基本原理" class="headerlink" title="Lucene全文搜索的基本原理"></a>Lucene全文搜索的基本原理</h4><p>Lucene是一个高效的，基于Java的全文检索库。那么什么叫做全文检索呢？这要从我们生活中的数据说起。<br>生活中的数据总体分为两种：结构化数据和非结构化数据。结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等。非结构化数据：指不定长或无固定格式的数据，如邮件，word文档等。当然有的地方还会提到第三种，半结构化数据，如XML，HTML等，当根据需要可按结构化数据来处理，也可抽取出纯文本按非结构化数据来处理。<br><strong>非结构化数据又一种叫法叫全文数据。</strong></p>
<p>对结构化数据的搜索：如对数据库的搜索，用SQL语句。再如对元数据的搜索，如利用windows搜索对文件名，类型，修改时间进行搜索等。<br>对非结构化数据的搜索：如利用windows的搜索也可以搜索文件内容，Linux下的grep命令，再如用Google和百度可以搜索大量内容数据。</p>
<p>对非结构化数据也即对全文数据的搜索主要有两种方法：<br>第一种：一种是顺序扫描法(Serial Scanning)：就是一个一个地扫描，但对于小数据量的文件，这种方法还是最直接，最方便的。但是对于大量的文件，这种方法就很慢了。对结构化数据的顺序扫描搜索却相对较快（由于结构化数据有一定的结构可以采取一定的搜索算法加快速度）<br>那么把我们的非结构化数据想办法弄得有一定结构不就行了吗？<br>这种想法很天然，却构成了全文检索的基本思路，也即将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。<br><strong>这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。</strong><br>这种说法比较抽象，举几个例子就很容易明白，比如字典，字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。<br>第二种：这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search)。<br><a href="http://forfuture1978.iteye.com/blog/546771" target="_blank" rel="external">Lucene学习总结之一：全文检索的基本原理</a></p>
<h4 id="TCP连接建立过程中为什么需要“三次握手”"><a href="#TCP连接建立过程中为什么需要“三次握手”" class="headerlink" title="TCP连接建立过程中为什么需要“三次握手”"></a>TCP连接建立过程中为什么需要“三次握手”</h4><p>传输控制协议（Transmission Control Protocol, TCP）是一种面向连接的、可靠的、基于字节流的运输层（Transport layer）通信协议。是专门为了在不可靠的互联网络上提供一个可靠的端到端字节流而设计的。<br>服务端SYN作用：请求建立连接。<br>服务端SYN+ACK的作用：服务端能接收到客户端的数据且允许建立连接。<br>客户端ACK的作用：客户端能接收到服务端的数且允许建立连接。三缺一不可。<br>client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。<br>本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了.所以不能是两次也不能是四次捂手。<br><a href="http://www.cnblogs.com/techzi/archive/2011/10/18/2216751.html" target="_blank" rel="external">TCP连接建立过程中为什么需要“三次握手”</a><br>PS:如果不知道，就这么回答，重要的事说三遍，重要的手握三遍。</p>
<h4 id="代码细节相关"><a href="#代码细节相关" class="headerlink" title="代码细节相关"></a>代码细节相关</h4><h5 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h5><p>合理使用括号，不要盲目依赖操作符优先级。利用操作符的优先级来减少括号，对于1 + 2 <em> 3这样常见的算数表达式，是没问题的。然而有些人如此的仇恨括号，以至于他们会写出2 &lt;&lt; 7 - 2 </em> 3这样的表达式，而完全不用括号。<br>这里的问题，在于移位操作&lt;&lt;的优先级，是很多人不熟悉，而且是违反常理的。由于x &lt;&lt; 1相当于把x乘以2，很多人误以为这个表达式相当于(2 &lt;&lt; 7) - (2 <em> 3)，所以等于250。然而实际上&lt;&lt;的优先级比加法+还要低，所以这表达式其实相当于2 &lt;&lt; (7 - 2 </em> 3)，所以等于4！</p>
<h5 id="干掉continue和break："><a href="#干掉continue和break：" class="headerlink" title="干掉continue和break："></a>干掉continue和break：</h5><p>case1:干掉continue：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; goodNames = new ArrayList&lt;&gt;();</div><div class="line">for (String name: names) &#123;</div><div class="line">  if (name.contains(&quot;bad&quot;)) &#123;</div><div class="line">    continue;</div><div class="line">  &#125;</div><div class="line">  goodNames.add(name);</div><div class="line">  ...</div><div class="line">&#125;  </div><div class="line">//需要把continue的条件反向,可以改为：</div><div class="line">List&lt;String&gt; goodNames = new ArrayList&lt;&gt;();</div><div class="line">for (String name: names) &#123;</div><div class="line">  if (!name.contains(&quot;bad&quot;)) &#123;</div><div class="line">    goodNames.add(name);</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>case2：干掉break：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">while (condition1) &#123;</div><div class="line">  ...</div><div class="line">  if (condition2) &#123;</div><div class="line">    break;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//可以改为</div><div class="line">while (condition1 &amp;&amp; !condition2) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Android系统相关问题"><a href="#Android系统相关问题" class="headerlink" title="Android系统相关问题"></a>Android系统相关问题</h2><h2 id="EQ相关问题"><a href="#EQ相关问题" class="headerlink" title="EQ相关问题"></a>EQ相关问题</h2><h2 id="生活相关问题"><a href="#生活相关问题" class="headerlink" title="生活相关问题"></a>生活相关问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java相关问题&quot;&gt;&lt;a href=&quot;#Java相关问题&quot; class=&quot;headerlink&quot; title=&quot;Java相关问题&quot;&gt;&lt;/a&gt;Java相关问题&lt;/h2&gt;&lt;h4 id=&quot;JVM自动内存管理，Minor-GC与Full-GC的触发机制&quot;&gt;&lt;a href=&quot;#JVM自动内存管理，Minor-GC与Full-GC的触发机制&quot; class=&quot;headerlink&quot; title=&quot;JVM自动内存管理，Minor GC与Full GC的触发机制&quot;&gt;&lt;/a&gt;JVM自动内存管理，Minor GC与Full GC的触发机制&lt;/h4&gt;&lt;p&gt;堆内存划分为 Eden、Survivor 和 Tenured/Old 空间。&lt;br&gt;从年轻代空间（包括 Eden 和 Survivor 区域）回收内存被称为 Minor GC。&lt;br&gt;当 JVM 无法为一个新的对象分配空间时会触发 Minor GC，比如当 Eden 区满了。所以分配率越高，越频繁执行 Minor GC。执行 Minor GC 操作时，不会影响到永久代。从永久代到年轻代的引用被当成 GC roots，从年轻代到永久代的引用在标记阶段被直接忽略掉。&lt;br&gt;总结：每次 Minor GC 会清理年轻代的内存。Major GC 是清理永久代。&lt;br&gt;Full GC 是清理整个堆空间—包括年轻代和永久代。&lt;br&gt;&lt;a href=&quot;http://www.importnew.com/15820.html&quot;&gt;Minor GC、Major GC和Full GC之间的区别&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android技术小栈" scheme="http://jijiaxin89.com/categories/Android%E6%8A%80%E6%9C%AF%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>内功心法点滴修炼</title>
    <link href="http://jijiaxin89.com/2016/02/25/%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95%E7%82%B9%E6%BB%B4%E4%BF%AE%E7%82%BC/"/>
    <id>http://jijiaxin89.com/2016/02/25/内功心法点滴修炼/</id>
    <published>2016-02-25T12:06:09.000Z</published>
    <updated>2017-03-15T16:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-25号-周四"><a href="#2-25号-周四" class="headerlink" title="2/25号  周四"></a>2/25号  周四</h3><p>0就是0,1就是1，没那么难。</p>
<p>小米手机不能监听到开机广播，其他手机大抵都是可以的吧。<br><code>com.android.internal.R.id.content</code> 和 <code>android.R.id.content</code>的区别</p>
<h3 id="2-29号-周一"><a href="#2-29号-周一" class="headerlink" title="2/29号  周一"></a>2/29号  周一</h3><p>//滚动到列首部—&gt;这是一个很方便的api，可以滑动到指定位置<br><code>mRecyclerView.scrollToPosition(0);</code>  </p>
<p>Sketch画的Vector Drawable<br>Binder粘合剂<br><a id="more"></a></p>
<h3 id="3-06号-周天"><a href="#3-06号-周天" class="headerlink" title="3/06号  周天"></a>3/06号  周天</h3><p>HOME_DIR/.gradle/gradle.properties<br>HOME_DIR is for each operating system. For Mac OS X and Linux, it is ~ ,while in Windows, it is C:\Users\USERNAME for the general case. </p>
<h3 id="3-21号-周一"><a href="#3-21号-周一" class="headerlink" title="3/21号  周一"></a>3/21号  周一</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。内容分发网络(CDN)是一个经策略性部署的整体系统，包括分布式存储、负载均衡、网络请求的重定向和内容管理4个要件，而内容管理和全局的网络流量管理(Traffic Management)是CDN的核心所在。<br>用户提交域名→浏览器对域名进行解释→得到目的主机的IP地址→根据IP地址访问发出请求→得到请求数据并回复<br>DRM，英文全称Digital Rights Management, 可以翻译为：内容数字版权加密保护技术。来加强保护这些数字化的音视频节目内容的版权 </p>
<h3 id="3-24号-周四"><a href="#3-24号-周四" class="headerlink" title="3/24号  周四"></a>3/24号  周四</h3><p>JAVA中的Serialize机制是将对象转化为字节流存储在外部设备，在需要时重新生成对象(采用java反射机制)。主要用于外部设备保存对象状态，网络传输对象等场景。缺点是产生很多中间对象及造成一定的GC(垃圾回收)，简而言之Serialize更慢；<br>Android提供的Parcel机制是针对移动设备的轻量级高效对象序列化机制。整个过程均在内存进行，不涉及外部设备，反序列化时读取的就是原对象，而不会创建新对象。简单来说Parcel更快；不过它使用复杂。<br>为什么需要对对象序列化后才能通过intent在组件间传递呢！？<br>因为在启动B Activity过程中，需要离开应用程序所在进程，转而调用native方法，进入linux kernel进程中去执行activity切换的实际操作。完成后再重新把传输数据带回到应用程序进程中，对原始打包数据进行解析。<br>也就是说，在启动B Activity过程中，所打包的数据要经过不同进程：应用程序-&gt;linux kernel-&gt;应用程序，而java对象是无法直接在进程间传输的，所以，我们需要提前序列化java对象，才能让它经得住后面跨进程传输的考验。<br>另外：JSONObject和JSONArray都不支持序列化。</p>
<p>RAM：random access memory 随机存储器。与CPU直接交换数据的内部存储器，也叫主存(内存)它可以随时读写，而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储媒介。<br>ROM：Read-Only Memory<br>是一种只能读出事先所存数据的固态半导体存储器。其特性是一旦储存资料就无法再将之改变或删除。通常用在不需经常变更资料的电子或电脑系统中，并且资料不会因为电源关闭而消失。<br>区别：<br>RAM：我们经常说的内存，比如计算机的内存，手机的内存，包括CPU里用的高速缓存，都属于RAM这类存储器。<br>ROM：不能像RAM一样可以随时读和写。它只允许在生产出来之后有一次写的机会，数据一旦写入则不可更改。它另外一个特点是存储器掉电后里面的数据不丢失，可以存放成百上千年。此类存储器多用来存放固件，比如计算机启动的引导程序，手机、MP3、MP4、数码相机等一些电子产品的相应的自带程序代码，这种用户可以通过刷机方式读写ROM。<br>RAM 一、是应用程序、操作系统的运行内存，关机会被清空的临时性存储器。<br>ROM 二、是COMPACT DISC激光唱片，光盘也属于这种(如：电脑系统光盘，gost版一般都可以直接在光盘上引导并启动winPE操作系统)。<br>综上所述，ROM指的是计算机（包括手机）的文件内存，RAM指的是用了运行系统及应用程序的临时性存储器，比如手机的操作系统、一些应用程序如游戏等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-25号-周四&quot;&gt;&lt;a href=&quot;#2-25号-周四&quot; class=&quot;headerlink&quot; title=&quot;2/25号  周四&quot;&gt;&lt;/a&gt;2/25号  周四&lt;/h3&gt;&lt;p&gt;0就是0,1就是1，没那么难。&lt;/p&gt;
&lt;p&gt;小米手机不能监听到开机广播，其他手机大抵都是可以的吧。&lt;br&gt;&lt;code&gt;com.android.internal.R.id.content&lt;/code&gt; 和 &lt;code&gt;android.R.id.content&lt;/code&gt;的区别&lt;/p&gt;
&lt;h3 id=&quot;2-29号-周一&quot;&gt;&lt;a href=&quot;#2-29号-周一&quot; class=&quot;headerlink&quot; title=&quot;2/29号  周一&quot;&gt;&lt;/a&gt;2/29号  周一&lt;/h3&gt;&lt;p&gt;//滚动到列首部—&amp;gt;这是一个很方便的api，可以滑动到指定位置&lt;br&gt;&lt;code&gt;mRecyclerView.scrollToPosition(0);&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Sketch画的Vector Drawable&lt;br&gt;Binder粘合剂&lt;br&gt;
    
    </summary>
    
      <category term="Android技术小栈" scheme="http://jijiaxin89.com/categories/Android%E6%8A%80%E6%9C%AF%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>三国杀唯美武将台词</title>
    <link href="http://jijiaxin89.com/2016/02/23/%E4%B8%89%E5%9B%BD%E6%9D%80%E5%94%AF%E7%BE%8E%E6%AD%A6%E5%B0%86%E5%8F%B0%E8%AF%8D/"/>
    <id>http://jijiaxin89.com/2016/02/23/三国杀唯美武将台词/</id>
    <published>2016-02-23T15:13:22.000Z</published>
    <updated>2017-03-15T16:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾经玩过一段时间三国杀，觉得台词很棒。</p>
<p>甄姬<br>倾国：「体迅飞凫，飘忽若神」；「凌波微步，罗袜生尘」；<br>洛神：「髣髴兮若轻云之闭月」；「飘摇兮若流风之回雪」。<br>语出洛神赋<br>「其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。髣髴兮若轻云之蔽月，飘摇兮若流风之回雪。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。」<br>阵亡台词：「悼良会之永绝兮，哀一逝而异乡」。</p>
<p>谢灵运说曹子建：「天下才有一石，曹子建独占八斗」<br>酒诗：「走马行酒礼，驱车布鱼肉」；「置酒高殿上，亲友从我游」。<br><a id="more"></a><br>界限突破曹操台词：「夫英雄者，胸怀大志，腹有良谋」</p>
<p>操曰：「夫英雄者，胸怀大志，腹有良谋，有包藏宇宙之机，吞吐天地之志者也。」玄德曰：「谁能当之？」操以手指玄德，后自指，曰：「今天下英雄，惟使君与操耳！」</p>
<p>自幼就被称为王佐之才的荀彧：<br>技能台词：「秉忠贞之志，守谦退之节」；<br>「或忠信而死节兮，或訑谩而不疑。」；「生食汉禄，死为汉臣」。</p>
<p>奇策：「倾力为国，算无遗策」；<br>智愚：「大勇若怯，大智如愚」；</p>
<p>邓艾：屯田：「休养生息，备战待敌」；凿险：「屯田日久，当建奇功」；「开辟险路，奇袭敌军」；觉醒技：「攻其不备，出其不意」；「偷渡阴平，奇袭蜀汉」；阵亡：「吾破蜀克敌，竟葬于奸贼之手」。</p>
<p>权计：「备兵驯马，以待战机」；「避其锋芒，权且忍让」；自立：「千载一时，鼎足而立」；「金鳞，岂是池中之物」；排异：「艾命不尊，死有余辜」；「非我族类，其心必异」；阵亡：「伯约，我已无力回天」。</p>
<p>老诸葛：<br>观星：「观今夜天象，知天下大势」；「知天意，逆天难」；</p>
<p>而到了界限突破的司马懿上，更是狂到了一种境界：<br>「才通天地，逆天改命」。</p>
<p>神诸葛：七星：「起星辰之力，佑我蜀汉」；「弗望天恩，誓讨汉贼」；狂风：「风<del>~起</del>~」；「万事俱备，只欠业火」；下面接上神周瑜的配音：业火：「烈火燎原，寸草无生」；「天降业火，尔等灰飞烟灭」；再加上庞统的连环计：「伤一敌，可连其百」；「铁索连舟，如履平地」；以及黄盖的苦肉计：「为成大义，死不足惜」；再加上诈降：「铁索连舟而行，东吴水师可破」。</p>
<p>接下来听到老诸葛和神诸葛的阵亡台词：「将星陨落，天命难违」；「今当远离，临表涕零，不知所言」；</p>
<p>英姿：「宏图霸业，尽在掌中」；反间：「陷敌摧坚，料敌机先」；「破敌制胜，意在攻心」。</p>
<p>孙策：「父亲在上，公瑾在旁，一拜天地，二拜高堂。」</p>
<p>步练师的台词比较有味道：「君子乐胥，万邦之屏。」「和鸾雍雍，万福攸同。」「终其永怀，恋心殷殷。」「妾心所系，如月之恒。」「江之永矣，不可方思。」</p>
<p>鲁肃：「君子贵人贱己，先人而后己」；「整齐好礼，乐善好施」；「辅车相依，唇亡齿寒」；「联盟祭起，戮力同心」。</p>
<p>勤学：「兵书熟读，了然于胸」；「勤以修身，学以报国」，识别三日，当刮目相看！非复吴下阿蒙矣！克己：「蓄力待时，不争首功」；「最好的机会，还在等着我」；攻心：「哼！早知如此」；「洞若观火，运筹帷幄」。</p>
<p>谦逊：「满招损，谦受益」；「谦谦君子，温润如玉」；联营：「生生不息，源源不绝」；「失之淡然，得之坦然」；<br>金庸的小说《书剑恩仇录》中有一句：「情深不寿，强极则辱，谦谦君子，温润如玉」。应该是出自这里吧。</p>
<p>太史慈阵亡：「大丈夫，当带三尺之剑，立不世之功」，这句我很喜欢。</p>
<p>张春华：无情者伤人，有情者自伤</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经玩过一段时间三国杀，觉得台词很棒。&lt;/p&gt;
&lt;p&gt;甄姬&lt;br&gt;倾国：「体迅飞凫，飘忽若神」；「凌波微步，罗袜生尘」；&lt;br&gt;洛神：「髣髴兮若轻云之闭月」；「飘摇兮若流风之回雪」。&lt;br&gt;语出洛神赋&lt;br&gt;「其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。髣髴兮若轻云之蔽月，飘摇兮若流风之回雪。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。」&lt;br&gt;阵亡台词：「悼良会之永绝兮，哀一逝而异乡」。&lt;/p&gt;
&lt;p&gt;谢灵运说曹子建：「天下才有一石，曹子建独占八斗」&lt;br&gt;酒诗：「走马行酒礼，驱车布鱼肉」；「置酒高殿上，亲友从我游」。&lt;br&gt;
    
    </summary>
    
      <category term="文艺小栈" scheme="http://jijiaxin89.com/categories/%E6%96%87%E8%89%BA%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="文学" scheme="http://jijiaxin89.com/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>2016生活随笔之一</title>
    <link href="http://jijiaxin89.com/2016/02/23/2016%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%E4%B9%8B%E4%B8%80/"/>
    <id>http://jijiaxin89.com/2016/02/23/2016生活随笔之一/</id>
    <published>2016-02-23T06:36:44.000Z</published>
    <updated>2017-03-15T16:50:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>过年回来，改收收心，好好加油。做个顶天立地的好儿郎。<br>不怕辜负青春年少，只想随你天涯海角。梦里听你一声长啸，忍不住想跟你逃。</p>
<h3 id="2-23号-周二"><a href="#2-23号-周二" class="headerlink" title="2/23号  周二"></a>2/23号  周二</h3><p>司勋绮语焚难尽，仆射余情忏较多<br>这是徐志摩去世的时候，金庸家（查家）送去的挽联。<br>意思是你写下的那些言情诗词，怎么也烧不完，你留下的情债太多了，怎么也忏悔不完。<br>“司勋”是古代一个官名，这里代指杜牧；“仆射（音“业”）”也是官名，这里代指沈约。历史上这两人都比较风流，这里暗指徐志摩。“绮语”本是指花言巧语，这里代指徐写下的那些文字。“余情”则是指徐所欠下的风流债。这两句话确实毫不留情，对徐的不满溢于言表。<br>徐志摩是金庸的表哥，穆旦是金庸的堂哥，琼瑶也是金庸的亲戚。<br><a id="more"></a></p>
<h3 id="2-24号-周三"><a href="#2-24号-周三" class="headerlink" title="2/24号  周三"></a>2/24号  周三</h3><p>尽快排上计划学Python, JavaScript ,了解一下swift。<br>在以下至少两个领域具有工作经验：网络应用开发、Unix/Linux 环境、移动应用开发、分布式并行系统、机器学习、信息检索、自然语言处理、网络、大型软件系统开发、安全防护软件开发。</p>
<p>奈何橋、孟婆湯、三生石、忘川河、彼岸花</p>
<p>要有最朴实的生活和最遥远的梦想，即便天寒地冻，路遥马亡。</p>
<h3 id="3-06号-周天"><a href="#3-06号-周天" class="headerlink" title="3/06号  周天"></a>3/06号  周天</h3><p>弱水三千饮一瓢，我要的是一生一世一双人。<br>红尘万场舞一夜，我要的是一花一叶一世界。<br>战场黄沙挑一旗，我要的是一家一国一单骑。<br>鸾凤散尽伊人泣，我要的是一歌一舞一柔荑。<br>菩提落子无一树，我要的是一语一禅一佛悟。<br>桃花十里植一岸，我要的是一箫一琴一世安。<br>西北狼烟战未休，我要的是一枪一剑一壶酒。<br>流年似水梦一场，我要的是一颦一笑一思量。<br>荷败香冷花一落，我要的是一山一河一承诺。<br>脂砚清墨书千行，我要的是一词一句一鸾章。<br>风月千都留一处，我要的是一曲一散一孤独。<br>兰陵美酒郁荷香，我要到是一醉一醒一未央。<br>后宫独宠只一人，我要的是一怒一笑一佳人。<br>梦里蘼芜青一剪，我要的是一思一念一相见。</p>
<h3 id="3-06号-周天-1"><a href="#3-06号-周天-1" class="headerlink" title="3/06号  周天"></a>3/06号  周天</h3><p>春水初生，春林初盛，春风十里，不如你。<br>杀机渐露，杀气渐浓，杀生无数，还有谁！</p>
<h3 id="3-20号-周天"><a href="#3-20号-周天" class="headerlink" title="3/20号  周天"></a>3/20号  周天</h3><p>很久很久以前,人类都还赤着双脚走路.有一位国王到某个偏远的乡间旅行,因为路面崎岖不平,有很多碎石头,刺得他的脚又痛又麻.回到王宫后,他下了一道命令,要将国内的所有道路都铺上一层牛皮.他认为这样做,不只是为自己,还可造福他的人民,让大家走路时不再受刺痛之苦.<br>但即使杀尽国内所有的牛,也筹措不到足够的皮革,而所花费的金钱、动用的人力,更不知凡几.虽然根本做不到,甚至还相当愚蠢,但因为是国王的命令,大家也只能摇头叹息. 　　一位聪明的仆人大胆向国王提出建言：“国王啊!为什么您要劳师动众,牺牲那么多头牛,花费那么多金钱呢?您何不只用两小片牛皮包住您的脚呢?”国王听了很惊讶,但也当下领悟,于是立刻收回成命,改采这个建议.据说,这就是“皮鞋”的由来. 小哲理：想改变世界,很难；要改变自己,则较为容易.与其改变全世界,不如先改变自己“将自己的双脚包起来.”改变自己的某些观念和作法,以抵御外来的侵袭.当自己改变后,眼中的世界自然也就跟着改变了.如果你希望看到世界改变,那么第一个必须改变的就是自己.“心若改变,态度就会改变；态度改变,习惯就改变；习惯改变,人生就会改变.”</p>
<h3 id="3-23号-周三"><a href="#3-23号-周三" class="headerlink" title="3/23号  周三"></a>3/23号  周三</h3><p>世上只有一种英雄主义，就是认清生活真相之后依然热爱生活。 –罗曼罗兰<br>此生棠棣开荼蘼，三遍荣华不如你。<br>哪里会有人喜欢孤独，不过是不喜欢失望。 –树上春村</p>
<p>VP（Vice President）副总裁</p>
<h3 id="3-25号-周五"><a href="#3-25号-周五" class="headerlink" title="3/25号  周五"></a>3/25号  周五</h3><p>尽量不要花太多时间看博客了，看的时候要迅速，多抽时间看书，注意知识的体系化。</p>
<p>今天听着《夜空中最亮的星》，突然意识到我的技术还停留在语言层面上，这似乎也是与Android突出的平台特点有关系，但是必须要向算法层面渗透，不然感觉不到成就感啊。</p>
<p>有很多人认为，片段的零碎的笔记，不算是干货文章，只有深入浅出一个问题的文章才是干货，对于这个看法不做评论，但是我想目前我这个博客应该会是本着读书笔记的基本作用来的，以后要多记，多记，多记。<br>我可能不会花精力成文干货，我就随性的记记就好，就这样。</p>
<p>有几个同学去了深圳了。了。。了。。。</p>
<h3 id="3-29号-周二"><a href="#3-29号-周二" class="headerlink" title="3/29号  周二"></a>3/29号  周二</h3><p>生活不止眼前的苟且，还有诗和远方的田野。<br>这句话几年前我就作为QQ签名用过了，这几天随着许巍的一首歌再度被炒热。<br>昨晚看到一个链接，说远方也不一定是诗和田野，可能比眼前还要苟且。。。对于这种论点，从来都不是有意义的。<br>远方，至少是有希望的吧。。。</p>
<p>浮躁，不安分的心啊。</p>
<h3 id="3-31号-周四"><a href="#3-31号-周四" class="headerlink" title="3/31号  周四"></a>3/31号  周四</h3><p>拒绝技术官僚 工程师文化.</p>
<h3 id="4-1号-周五"><a href="#4-1号-周五" class="headerlink" title="4/1号  周五"></a>4/1号  周五</h3><p>生活之累，一半来于生存，一半来于攀比。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过年回来，改收收心，好好加油。做个顶天立地的好儿郎。&lt;br&gt;不怕辜负青春年少，只想随你天涯海角。梦里听你一声长啸，忍不住想跟你逃。&lt;/p&gt;
&lt;h3 id=&quot;2-23号-周二&quot;&gt;&lt;a href=&quot;#2-23号-周二&quot; class=&quot;headerlink&quot; title=&quot;2/23号  周二&quot;&gt;&lt;/a&gt;2/23号  周二&lt;/h3&gt;&lt;p&gt;司勋绮语焚难尽，仆射余情忏较多&lt;br&gt;这是徐志摩去世的时候，金庸家（查家）送去的挽联。&lt;br&gt;意思是你写下的那些言情诗词，怎么也烧不完，你留下的情债太多了，怎么也忏悔不完。&lt;br&gt;“司勋”是古代一个官名，这里代指杜牧；“仆射（音“业”）”也是官名，这里代指沈约。历史上这两人都比较风流，这里暗指徐志摩。“绮语”本是指花言巧语，这里代指徐写下的那些文字。“余情”则是指徐所欠下的风流债。这两句话确实毫不留情，对徐的不满溢于言表。&lt;br&gt;徐志摩是金庸的表哥，穆旦是金庸的堂哥，琼瑶也是金庸的亲戚。&lt;br&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>痴话元宵</title>
    <link href="http://jijiaxin89.com/2016/02/22/%E7%97%B4%E8%AF%9D%E5%85%83%E5%AE%B5/"/>
    <id>http://jijiaxin89.com/2016/02/22/痴话元宵/</id>
    <published>2016-02-22T12:20:36.000Z</published>
    <updated>2017-03-15T16:50:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>元宵节，古时候称为上元节。<br>元宵节是农历年的第一个月圆之夜。人们有赏灯吃元宵的习惯。有句古话是：“三十儿的火，十五的灯”，所以又叫春灯节。</p>
<p>元宵节早在西汉时候就有了，至今约莫20个世纪了。而元宵赏灯则起于东汉，那个时候东汉明帝提倡佛教，他听闻有正月十五僧人观佛舍利，点灯敬佛的做法，就命令这一天夜晚在皇宫和寺庙里点灯敬佛，从此有了赏灯活动。到了唐代，赏灯更加兴盛，皇宫里，街道上处处挂灯，还要建立高大的灯轮、灯楼和灯树，据记载有的灯轮高20丈。宋代更重视元宵节，赏灯活动更加热闹，要持续5天，灯式也更丰富。明代要持续赏灯10天，是中国之最。清代只有3天，但赏灯规模很大，盛况空前。<br><a id="more"></a><br>而我，对元宵节一直都不太感冒。<br>回头想想，已经很久不在家过元宵节了，每年此时大都没有什么心思去玩，只是留给自己排解春节后的离家之苦。</p>
<p>本来就是个想家的日子，今天心事又额外加了一桩。<br>那是一种失重的感觉，轻飘飘的。</p>
<p>跟家里人视频了一会，挺开心，视频里看到家人，心情便不再那么惆怅了，感谢亲人，给我内心的宁静。<br>生活的意义就是亲人，无他。爱人也是亲人。好男儿要让亲人享福！无他。</p>
<p>我敢打赌视频前那会，心情激荡的时候写这篇文章的话，一定会是另一篇文章。（这不是废话嘛）<br>现在就只能是记记流水账了。</p>
<p>说完灯，再说说汤圆。</p>
<p>刚才一位朋友给我发了个消息：小小的汤圆圆又圆。令我忍俊不禁。“卖汤圆卖汤圆，小小的汤圆是圆又圆，一碗汤圆满又满，三毛钱来买一碗……吃了汤圆好团圆,慢了一步只怕要卖完。”这歌相信都很熟。这是首台湾的民谣，回响在我们懵懂的青春岁月。<br>圆圆，代表团圆，寓意圆满，一家人团圆平安喜乐，这可不就是最大的幸福么。<br>我记得小时候的汤圆都是自家做的，买材料，五颜六色的陷儿，大人小孩团丸子，到处氤氲着煮汤圆的雾白水汽，那是快乐。</p>
<p>—–华丽的分隔线—–<br>特么的，就在刚才，错过了老板在群里发的红包。这篇文章可真算是注入了我得心血。。哈哈~~<br>—–就是那么美呀—–</p>
<p>这两天有点心事，但又不能和你们说，因为大学宿舍那几个损友也订阅了这个号，不能被他们嘲讽！宿舍群这几天挺忙，有的忙着拍照片，有的忙着签字，有的申请红本本…</p>
<p>只能默默一个人读诗咯。这个时候，唯有纳兰最懂我了吧。<br>《采桑子》纳兰<br>谁翻乐府凄凉曲，风也潇潇，雨也萧萧，瘦尽灯花又一宵。<br>不知何事萦怀抱，醒也无聊，醉也无聊，梦也何曾到谢桥。</p>
<p>生平最爱纳兰词，不管什么时候，总有那么一两首能够深入肺腑内心深处。</p>
<p>“情似游丝，人如飞絮，泪珠额定空相觑。一溪烟柳万丝垂，无因系得兰舟住。雁过斜阳，草迷烟渚。如今已是愁无数。明朝且做莫思量，如何过得今宵去。”</p>
<p>最后一个笑话送给你们：今天出门遛狗，一个美女两眼发光的跑过来说：“哎呀，好可爱啊！”我笑着说：“你这么喜欢宠物的话，送给你吧！”美女又惊又喜的点点头，于是我把狗绳一放，对狗狗说：“再见了，主人！”</p>
<p>写的有点支离破碎。因为我失重了！<br>Good night，明天继续努力Coding。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元宵节，古时候称为上元节。&lt;br&gt;元宵节是农历年的第一个月圆之夜。人们有赏灯吃元宵的习惯。有句古话是：“三十儿的火，十五的灯”，所以又叫春灯节。&lt;/p&gt;
&lt;p&gt;元宵节早在西汉时候就有了，至今约莫20个世纪了。而元宵赏灯则起于东汉，那个时候东汉明帝提倡佛教，他听闻有正月十五僧人观佛舍利，点灯敬佛的做法，就命令这一天夜晚在皇宫和寺庙里点灯敬佛，从此有了赏灯活动。到了唐代，赏灯更加兴盛，皇宫里，街道上处处挂灯，还要建立高大的灯轮、灯楼和灯树，据记载有的灯轮高20丈。宋代更重视元宵节，赏灯活动更加热闹，要持续5天，灯式也更丰富。明代要持续赏灯10天，是中国之最。清代只有3天，但赏灯规模很大，盛况空前。&lt;br&gt;
    
    </summary>
    
      <category term="文艺小栈" scheme="http://jijiaxin89.com/categories/%E6%96%87%E8%89%BA%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="文学" scheme="http://jijiaxin89.com/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android事件分发机制和事件冲突</title>
    <link href="http://jijiaxin89.com/2016/02/21/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E6%99%BA%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81/"/>
    <id>http://jijiaxin89.com/2016/02/21/Android事件分发机智和事件冲突/</id>
    <published>2016-02-21T14:11:11.000Z</published>
    <updated>2017-03-15T16:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>彻底理解Android事件分发机制有利于做一个具有良好交互性的应用。</p>
<p>1.View和ViewGroup是什么。<br>2.事件。<br>3.View事件的分发机制<br>4.ViewGroup事件的分发机制</p>
<p>Android的UI界面都是由View和ViewGroup及其派生类组合而成的。其中，View是所有UI组件的基类，而ViewGroup是容纳这些组件的容器，其本身也是从View派生出来的，也就是说ViewGroup的父类就是View。<br><a id="more"></a><br>自顶向下的事件分发与自底向上的事件响应机制！</p>
<p>用作默认事件处理程序的回调方法。类定义中的那种。<br>事件处理程序。设置的监听器的那种。</p>
<p>自定义组件常用默认事件处理程序回调方法。<br>onKeyDown(int, KeyEvent)：在发生新的按键事件时调用<br>onKeyUp(int, KeyEvent)：在发生按键弹起事件时调用<br>onTrackballEvent(MotionEvent)：在发生轨迹球运动事件时调用<br>onTouchEvent(MotionEvent)：在发生触摸屏运动事件时调用<br>onFocusChanged(boolean, int, Rect)：在视图获得或失去焦点时调用。</p>
<p>为了拦截事件，可以扩展View并重写事件处理方法，但是为了处理此类事件而扩展每个视图并不现实，因此View还包括一系列嵌套接口以及您可以更加轻松定义的回调，即事件侦听器。onTouchListener，onClickListener之类的。扩展View能更自如的定义事件处理程序。<br>嵌套接口onClick没有返回值，其他事件侦听器需要返回布尔值。返回“true”表示您已经处理事件且事件应就此停止；如果您尚未处理事件,或事件应该继续传递给其他任何点击侦听器，则返回“false”。<br>onTouch()： 此方法返回一个布尔值，表示侦听器是否处理完此事件。重要的是，此事件可以拥有多个分先后顺序的操作。 因此，如果在收到关闭操作事件时返回“false”，则表示您并未处理完此事件，而且对其后续操作也不感兴趣。 因此，您无需执行事件内的任何其他操作，如手势或最终操作事件。</p>
<p>注：Android 会先调用事件处理程序，然后从类定义调用合适的默认处理程序。比如：onTouchListener要优于onTouchEvent被执行。 因此，从这些事件侦听器返回“true”会停止将事件传播到其他事件侦听器，还会阻止回调视图对象中的默认事件处理程序。 因此，在返回“true”时请确保您要终止事件。</p>
<p>还有一些其他方法值得您注意，尽管它们并非 View 类的一部分，但可能会直接影响所能采取的事件处理方式。 因此，在管理布局内更复杂的事件时，请考虑使用以下其他方法：</p>
<p>Activity.dispatchTouchEvent(MotionEvent)：此方法允许 Activity 在分派给窗口之前截获所有触摸事件。<br>ViewGroup.onInterceptTouchEvent(MotionEvent)：此方法允许 ViewGroup 监视分派给子视图的事件。<br>ViewParent.requestDisallowInterceptTouchEvent(boolean)： 对父视图调用此方法表明不应使用 onInterceptTouchEvent(MotionEvent) 截获触摸事件。ViewParent是个接口。</p>
<p>请记住，硬按键事件总是传递给目前处于焦点的视图对象。它们从视图 层次结构的顶部开始分派，然后向下，直至到达合适的目的地。如果您的视图对象（或视图对象的子项）目前具有焦点，那么您可以看到事件经由 dispatchKeyEvent() 方法的分派过程。除了通过视图捕获按键事件即onKey()<br>在 View.OnKeyListener 中，<br>您还可以使用 onKeyDown() 和 onKeyUp() 接收 Activity 内部的所有事件。</p>
<p>触摸模式：<br>当用户使用方向键或轨迹球导航用户界面时，必须聚焦到可操作项目上（如按钮），以便用户看到将接受输入的对象。 但是，如果设备具有触摸功能且用户开始通过触摸界面与之交互，则不再需要突出显示项目或聚焦到特定视图对象上。 因此，有一种交互模式称为“触摸模式”。对于支持触摸功能的设备，当用户触摸屏幕时，设备会立即进入触摸模式。 自此以后，只有 isFocusableInTouchMode() 为“true”的视图才可聚焦，如文本编辑小工具。其他可触摸的视图（如按钮）在用户触摸时不会获得焦点；按下时它们只是触发点击侦听器。无论何时，只要用户点击方向键或滚动轨迹球，设备就会退出触摸模式并找到一个视图使其获得焦点。 整个系统（所有窗口和 Activity）都将保持触摸模式状态。要查询当前状态，您可以调用 isInTouchMode() 来检查设备目前是否处于触摸模式。</p>
<p>焦点移动所使用的算法会查找指定方向上距离最近的元素。 </p>
<hr>
<p>在极少数情况下，默认算法可能与开发者的期望行为不一致。这时可以：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    android:orientation="vertical"</div><div class="line">    ... &gt;</div><div class="line">  &lt;Button android:id="@+id/top"</div><div class="line">          android:nextFocusUp="@+id/bottom"</div><div class="line">          ... /&gt;</div><div class="line">  &lt;Button android:id="@+id/bottom"</div><div class="line">          android:nextFocusDown="@+id/top"</div><div class="line">          ... /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>若要将一个视图声明为在 UI 中可聚焦（传统上并非如此），请在布局声明中将 android:focusable XML 属性添加到该视图。将值设置为 true。此外，您还可以使用 android:focusableInTouchMode 将 Vew 声明为在触摸模式下可聚焦。</p>
<p>要请求要获得焦点的特定视图，请调用 requestFocus()。</p>
<p>Managing Touch Event in a ViewGroup</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;彻底理解Android事件分发机制有利于做一个具有良好交互性的应用。&lt;/p&gt;
&lt;p&gt;1.View和ViewGroup是什么。&lt;br&gt;2.事件。&lt;br&gt;3.View事件的分发机制&lt;br&gt;4.ViewGroup事件的分发机制&lt;/p&gt;
&lt;p&gt;Android的UI界面都是由View和ViewGroup及其派生类组合而成的。其中，View是所有UI组件的基类，而ViewGroup是容纳这些组件的容器，其本身也是从View派生出来的，也就是说ViewGroup的父类就是View。&lt;br&gt;
    
    </summary>
    
      <category term="Android技术小栈" scheme="http://jijiaxin89.com/categories/Android%E6%8A%80%E6%9C%AF%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>生活瞎想（六）</title>
    <link href="http://jijiaxin89.com/2016/01/02/Life-Essay-six/"/>
    <id>http://jijiaxin89.com/2016/01/02/Life-Essay-six/</id>
    <published>2016-01-02T13:23:08.000Z</published>
    <updated>2017-03-15T16:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>新年新气象，刚好到了第六篇，是要六六大顺的意思麽。</p>
<h3 id="01-02号-周六"><a href="#01-02号-周六" class="headerlink" title="01/02号  周六"></a>01/02号  周六</h3><p>上周眼睛不舒服，导致工作效率低下，现在感觉好多了。今儿去健身房呆了十几分钟，被自己的体重吓到了。。。总结起来就是，我的体重超乎你的想象。<br>人无贵贱，都一样可以追求星辰大海。</p>
<p>“生命如果不能浪费在我所喜欢的人身上，那我宁愿把生命浪费在自己身上。”</p>
<blockquote>
<p>生命如果不能浪费在我所喜欢的人身上，那我宁愿把生命浪费在自己身上。我宁愿寂寞拥抱我，让我沉浸于一个人的美好孤独之中。但是，我不愿去碰触那些我不喜欢的身体，去回应那些我毫无感觉的词句，去拥抱那些我从未为之心动过的灵魂。爱是一种放大了的自由，而与这些人的相处对我而言却是时时刻刻的束缚。</p>
</blockquote>
<p>“曾经有个朋友跟我说，恋爱谈多了会把人性谈没了。恍然惊醒，隐约是有这么一种感觉。恋爱开始走形式，走完了就是一段结束。我还是想要那种心流涌过的悸动，两个人聊着聊着的相视一笑，两个人沉默无语的互相陪伴。”</p>
<a id="more"></a>
<h3 id="01-11号-周一"><a href="#01-11号-周一" class="headerlink" title="01/11号  周一"></a>01/11号  周一</h3><p>关于找对象的事。有人说，实在没有精力再去重新了解一个人，也没有精力再重新向一个人谈论自己的过往了。太累了。每天上班压力那么大，下班后就想自己安静待会然后睡觉。。。感同身受得没法更多。</p>
<h3 id="01-14号-周四"><a href="#01-14号-周四" class="headerlink" title="01/14号  周四"></a>01/14号  周四</h3><p>“努力最大的动力在于，你可以选择你想要的生活，而不是被生活选择。”</p>
<h3 id="01-18号-周一"><a href="#01-18号-周一" class="headerlink" title="01/18号  周一"></a>01/18号  周一</h3><p>“踏上青峰之巅，走过山外之山，在深潭和长河中寻找瑰宝和奇迹，然后把这些东西带到世人的面前，改变人们的生活。”</p>
<h3 id="01-19号-周二"><a href="#01-19号-周二" class="headerlink" title="01/19号  周二"></a>01/19号  周二</h3><p>最近效率有点低，要对自己严格一点，严格一点呀。<br>“有勇气改变你能改变的事情，有耐心忍耐你不能改变的事情，有智慧区分它们”<br>回忆得多了，就容易多愁善感，这样不好，要改，说明你现在过得不充实。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新年新气象，刚好到了第六篇，是要六六大顺的意思麽。&lt;/p&gt;
&lt;h3 id=&quot;01-02号-周六&quot;&gt;&lt;a href=&quot;#01-02号-周六&quot; class=&quot;headerlink&quot; title=&quot;01/02号  周六&quot;&gt;&lt;/a&gt;01/02号  周六&lt;/h3&gt;&lt;p&gt;上周眼睛不舒服，导致工作效率低下，现在感觉好多了。今儿去健身房呆了十几分钟，被自己的体重吓到了。。。总结起来就是，我的体重超乎你的想象。&lt;br&gt;人无贵贱，都一样可以追求星辰大海。&lt;/p&gt;
&lt;p&gt;“生命如果不能浪费在我所喜欢的人身上，那我宁愿把生命浪费在自己身上。”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生命如果不能浪费在我所喜欢的人身上，那我宁愿把生命浪费在自己身上。我宁愿寂寞拥抱我，让我沉浸于一个人的美好孤独之中。但是，我不愿去碰触那些我不喜欢的身体，去回应那些我毫无感觉的词句，去拥抱那些我从未为之心动过的灵魂。爱是一种放大了的自由，而与这些人的相处对我而言却是时时刻刻的束缚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“曾经有个朋友跟我说，恋爱谈多了会把人性谈没了。恍然惊醒，隐约是有这么一种感觉。恋爱开始走形式，走完了就是一段结束。我还是想要那种心流涌过的悸动，两个人聊着聊着的相视一笑，两个人沉默无语的互相陪伴。”&lt;/p&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>盗墓笔记（六）</title>
    <link href="http://jijiaxin89.com/2016/01/02/Notes-on-Tech-six/"/>
    <id>http://jijiaxin89.com/2016/01/02/Notes-on-Tech-six/</id>
    <published>2016-01-02T12:24:51.000Z</published>
    <updated>2017-03-15T16:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年第一篇笔记，也是总第6篇笔记。加油，随笔。</p>
<h3 id="01-02号-周六"><a href="#01-02号-周六" class="headerlink" title="01/02号  周六"></a>01/02号  周六</h3><p>物联网（Internet of Things）简写作Iots </p>
<p>onMesure会被调用多次，onLayout会被调用一次，更轻量级，所以可以把耗时处理操作尽量从onMeasure往onLayout中移过来。<br>requestLayout只重新布局，invalidate会调用ondraw，postInvalidate供子线程调用。<br>onDraw只考虑绘制内容区域，背景什么的不要管。<br>一般情况下:自定义view考虑onMeasure和onDraw;自定义viewGroup考虑onMeasure和onLayout,不需要考虑onDraw。有交互的时候考虑onTouchEvent。<br>第一个手指触控时候，第二个手指触控会夺取控制权，这时候第三个手指触控会第三个手指拥有控制权，此时第三个手指抬起后，第一个手机将获得控制权。<br><a id="more"></a><br>静态成员变量属于类不属于对象，所以不会参与序列化过程；用transient(瞬时的)关键字标记的成员变量不参与序列化过程。<br>系统已经为我们提供了很多实现了Parcelable接口的类，他们都是可以直接序列化的，比如：Intent，Bundle，Bitmap等，同时List和Map也可以序列化，前提是他们里面的每个元素都是可以序列化的。</p>
<h3 id="01-03号-周天"><a href="#01-03号-周天" class="headerlink" title="01/03号  周天"></a>01/03号  周天</h3><p>HttpUrlConnection 在 2.3 以前的版本是有 bug 的，所以之前的版本推荐使用 HttpClient，但是 google 现在已经不维护 HttpClient 了，5.1里面已经把 HttpClient 标过期。另外 HttpURLConnection 支持gzip压缩等，推荐首选它。<br><a href="http://blog.csdn.net/yaozhifeng123456/article/details/48465091" target="_blank" rel="external">HttpURLConnection 与 Android HttpClient 对比</a></p>
<p>okhttp是folk的HttpUrlConnection</p>
<h3 id="01-04号-周一"><a href="#01-04号-周一" class="headerlink" title="01/04号  周一"></a>01/04号  周一</h3><p>CRLF代表回车换行<br>关于为什么用CRLF代表回车换行，则要提一下一个历史问题，相信大家在电视上看美国一些老电影的时候都看过打字员使用打字机的场景，当打字到一行尾部的时候，机器会有两个操作，一个是打印的针头会调回到开始处；另一个是打印纸同时会向下移动一行。对于前者就叫做Carriage Return（Carriage Return可以翻译为机器滑动的部分回到开始处）简写即为CR；而后者就叫做Line Feed（Line Feed有行满的意思），简称LF。所以在没有计算机之前，需要同时使用CRLF来表示起一个新行。</p>
<p>defaultConfig方法包含了该app的核心属性，该属性会重写在AndroidManifest.xml中的对应属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">       applicationId <span class="string">"com.gradleforandroid.gettingstarted"</span></div><div class="line">       minSdkVersion <span class="number">14</span></div><div class="line">       targetSdkVersion <span class="number">22</span></div><div class="line">       versionCode <span class="number">1</span></div><div class="line">       versionName <span class="string">"1.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Gradle能够很轻松的构建不同版本的app,使用构建变种。举个例子，其能够很轻松的创建一个免费版本和付费版本的app。这两个版本需要分隔的标示码，所以他们能够以不同的app出现在各大应用商店，当然他们也能够同时安装在一个手机中。资源代码和R文件必须拥有相同的包名，否则你的资源代码将需要改变，这就是为什么Android开发团队要将package name的两大功能拆分开。在AndroidManifest文件中定义的package name依然被用来作为包名和R文件的包名。而applicationid将被用在设备和各大应用商店中作为唯一的标示。<br>android插件依赖于Java插件，而Java插件依赖于base插件。</p>
<p>基本的tasks<br>base插件有基本的tasks生命周期和一些通用的属性。<br>base插件定义了例如assemble和clean任务，Java插件定义了check和build任务，这两个任务不在base插件中定义。<br>这些tasks的约定含义：<br>assemble: 集合所有的output<br>clean: 清除所有的output<br>check: 执行所有的checks检查，通常是unit测试和instrumentation测试<br>build: 执行所有的assemble和check<br>Java插件同时也添加了source sets的概念。</p>
<p>Android tasks<br>android插件继承了这些基本tasks,并且实现了他们自己的行为：<br>assemble 针对每个版本创建一个apk<br>clean 删除所有的构建任务，包含apk文件<br>check 执行Lint检查并且能够在Lint检测到错误后停止执行脚本<br>build 执行assemble和check</p>
<p>使用aar文件<br>如果你想复用你的library，那么你就可以创建一个aar文件，并将其作为你的工程依赖。当你构建你的library项目，aar文件将会在 build/output/aar/下生成。把该文件作为你的依赖包，你需要创建一个文件夹来放置它，我们就叫它aars文件夹吧，然后把它拷贝到该文件夹里面，然后添加该文件夹作为依赖库：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    flatDir &#123;</div><div class="line">        dirs <span class="string">'aars'</span> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样你就可以把该文件夹下的所有aar文件作为依赖，同时你可以这么干：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">       compile(<span class="string">name:</span><span class="string">'libraryname'</span>, <span class="string">ext:</span><span class="string">'aar'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有些时候，你可能需要和sdk协调工作。为了能顺利编译你的代码，你需要添加SDK到你的编译环境。你不需要将sdk包含在你的APK中，因为它早已经存在于设备中，所以配置来啦，我们会有5个不同的配置：</p>
<p>compile<br>apk<br>provided<br>testCompile<br>androidTestCompile</p>
<p>compile是默认的那个，其含义是包含所有的依赖包，即在APK里，compile的依赖会存在。<br>apk的意思是apk中存在，但是不会加入编译中，这个貌似用的比较少。<br>provided的意思是提供编译支持，但是不会写入apk。<br>testCompile和androidTestCompile会添加额外的library支持针对测试。</p>
<p>在一些情形中，你可能想使用最新的依赖包在构建你的app或者library的时候。实现他的最好方式是使用动态版本。我现在给你们展示几种不同的动态控制版本方式：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">       compile <span class="string">'com.android.support:support-v4:22.2.+'</span></div><div class="line">       compile <span class="string">'com.android.support:appcompat-v7:22.2+'</span></div><div class="line">       compile <span class="string">'com.android.support:recyclerview-v7:+'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一行，我们告诉gradle,得到最新的生产版本。第二行，我们告诉gradle，我们想得到最新的minor版本，并且其最小的版本号是2. 第三行，我们告诉gradle,得到最新的library。<br>你应该小心去使用动态版本，如果当你允许gradle去挑选最新版本，可能导致挑选的依赖版本并不是稳定版，这将会对构建产生很多问题，更糟糕的是你可能在你的服务器和私人pc上得到不同的依赖版本，这直接导致你的应用不同步。</p>
<h3 id="01-07号-周四"><a href="#01-07号-周四" class="headerlink" title="01/07号  周四"></a>01/07号  周四</h3><p>abstract不能与final并列修饰同一个类。<br>abstract不能与private、static、final或native并列修饰同一个方法。</p>
<p>接口是用来建立类与类之间的协议，它所提供的只是一种形式，而没有具体的实现。同时实现该接口的实现类必须要实现该接口的所有方法，通过使用implements关键字，他表示该类在遵循某个或某组特定的接口，同时也表示着“interface只是它的外貌，但是现在需要声明它是如何工作的”。</p>
<p>一个Interface的方所有法访问权限自动被声明为public。确切的说只能为public，当然你可以显示的声明为protected、private，但是编译会出错！<br>接口中可以定义“成员变量”，或者说是不可变的常量，因为接口中的“成员变量”会自动变为为public static final。可以通过类命名直接访问：ImplementClass.name。<br>可以使用 instanceof 检查一个对象是否实现了某个特定的接口。例如：if(anObject instanceof Comparable){}。</p>
<h3 id="01-08号-周五"><a href="#01-08号-周五" class="headerlink" title="01/08号  周五"></a>01/08号  周五</h3><p>private final String TAG = this.getClass().getSimpleName();</p>
<p>requestLayout()方法会调用measure过程和layout过程<br>onLayout中setbitmap会调用requestLayout(),所以要post延时一下，等待onLayout完毕再setBitmap。</p>
<p>ViewRoot对应于ViewRootImpl类，他是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成的。在ActivityThread中，当Activity对象被创建完毕后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并将ViewRootImpl和DecorView建立关联。<br>DecorView其实是一个FrameLayout，view的事件都是先经过DecorView，然后传递给我们的view。</p>
<h3 id="01-10号-周天"><a href="#01-10号-周天" class="headerlink" title="01/10号  周天"></a>01/10号  周天</h3><p>minSdkVersion 和 targetSdkVersion会被包含进最终的 APK 文件中，如果你查看生成的 AndroidManifest.xml 文件，你会看到类似下面这样的标签：<br><code>&lt;uses-sdk android:targetSdkVersion=&quot;23&quot; android:minSdkVersion=&quot;7&quot; /&gt;</code><br>compileSdkVersion 不会包含进去,compileSdkVersion应该保持是最新的。<br><code>minSdkVersion &lt;= targetSdkVersion &lt;= compileSdkVersion</code><br>理想上，在稳定状态下三者的关系应该更像这样：<br><code>minSdkVersion (lowest possible) &lt;= 
    targetSdkVersion == compileSdkVersion (latest SDK)</code><br>用较低的 minSdkVersion 来覆盖最大的人群，用最新的 SDK 设置 target 和 compile 来获得最好的外观和行为。</p>
<h3 id="01-13号-周三"><a href="#01-13号-周三" class="headerlink" title="01/13号  周三"></a>01/13号  周三</h3><p>清除数据：清除数据主要是清除用户配置，比如SharedPreferences、数据库等等，这些数据都是在程序运行过程中保存的用户配置信息，清除数据后，下次进入程序就和第一次进入程序时一样。<br>清除缓存：缓存是程序运行时的临时存储空间，它可以存放从网络下载的临时图片，从用户的角度出发清除缓存对用户并没有太大的影响，但是清除缓存后用户再次使用该APP时，由于本地缓存已经被清理，所有的数据需要重新从网络上获取，注意：为了在清除缓存的时候能够正常清除与应用相关的缓存，请将缓存文件存放在getCacheDir()或者 getExternalCacheDir()路径下。<br>一键清理：一键清理是系统级别的功能，它主要是杀后台进程，以达到释放内存的目的，但杀掉哪些进程和清理时设置的重要值阈值有关，重要值越大说明进程重要程度越低，如果在清理时某个进程的重要值大于该阈值，该进程就会被杀掉。<br><a href="http://zmywly8866.github.io/2015/03/22/difference-between-clear-data-clear-cache-clean-up.html" target="_blank" rel="external">明云的博客</a><br><code>getCacheDir()</code>方法用于获取<code>/data/data/&lt;application package&gt;/cache</code>目录<br><code>getFilesDir()</code>方法用于获取<code>/data/data/&lt;application package&gt;/files</code>目录<br>通过<code>Context.getExternalFilesDir()</code>方法可以获取到 <code>SDCard/Android/data/你的应用的包名/files/</code>目录，一般放一些长时间保存的数据<br>通过<code>Context.getExternalCacheDir()</code>方法可以获取到 <code>SDCard/Android/data/你的应用包名/cache/</code>目录，一般存放临时缓存数据<br>专门写一个方法来获取缓存地址<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDiskCacheDir</span><span class="params">(Context context)</span> </span>&#123;  </div><div class="line">    String cachePath = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())  </div><div class="line">            || !Environment.isExternalStorageRemovable()) &#123;  </div><div class="line">        cachePath = context.getExternalCacheDir().getPath();  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        cachePath = context.getCacheDir().getPath();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> cachePath;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当SD卡存在或者SD卡不可被移除的时候，就调用<code>getExternalCacheDir()</code>方法来获取缓存路径，否则就调用<code>getCacheDir()</code>方法来获取缓存路径。前者获取到的就是 <code>/sdcard/Android/data/&lt;application package&gt;/cache</code>这个路径，而后者获取到的是 <code>/data/data/&lt;application package&gt;/cache</code>这个路径。</p>
<p><code>Ctrl+Shift+T</code>恢复google浏览器关闭后的整个卡页。</p>
<h3 id="01-16号-周六"><a href="#01-16号-周六" class="headerlink" title="01/16号  周六"></a>01/16号  周六</h3><p>直接用String拼接字符串时，编译器生成class文件时会自动优化为StringBuilder，但是是在每个循环体中实例化一次。性能上还是不如直接用StringBuilder拼接，因为直接用StringBuilder 循环体外部实例一次。</p>
<p> compile fileTree(dir: ‘libs’, include: ‘<em>.jar’) 正确<br> compile fileTree(dir: ‘libs’, include: [‘</em>.jar’]) 错误，此时坚果手机播放不了</p>
<h3 id="01-17号-周天"><a href="#01-17号-周天" class="headerlink" title="01/17号  周天"></a>01/17号  周天</h3><p>装饰者模式跟代理模式的区别：<br>装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。换句话说，用代理模式，代理类（proxy class）可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。<br>我们可以用另外一句话来总结这些差别：使用代理模式，代理和真实对象之间的的关系通常在编译时就已经确定了，而装饰者能够在运行时递归地被构造。<br>装饰者的构造需要传入被装饰者的实例，而代理者不需要</p>
<h3 id="01-20号-周三"><a href="#01-20号-周三" class="headerlink" title="01/20号  周三"></a>01/20号  周三</h3><p>获取view的mLeft，mRight，mTop，mBottom。这几个左边啊都是相对父级view的，不是相对整个屏幕。分别通过方法getLeft()，getRight(),getTop(),getBottom()来获得。<br>3.0以后加入了x,y,translationX,translationY.view在平移过程中，top和left表示原始左上角的位置信息，不会变化的。x,y,translationX,translationY会随着移动变化，x，y表示移动后的坐标，translationX,translationY表示移动距离。x=left+translationX,y=top+translationY<br>在手机触摸屏幕时，产生一系列点击事件，通过MotionEvent对象我们可以得到点击事件发生的x，y坐标。系统提供了两组方法，getX/getY和getRawX/getRawY.区别是:getX/getY返回的是相对于当前view左上角的x和y左边，而getRawX/getRawY返回的是相对于手机屏幕左上角的x和y左标。<br>TouchSlop=ViewConfiguration.get(getContext()).getScaledTouchSlop(),是系统所能识别出的被认为是活动的最小距离。</p>
<p>gson解析之：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"files"</span>: &#123;</div><div class="line">    <span class="string">"Hello.txt"</span>: &#123;</div><div class="line">      <span class="string">"type"</span>: <span class="string">"text/plain"</span>,</div><div class="line">      <span class="string">"content"</span>: <span class="string">"Hello World!\n"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"created_at"</span>: <span class="string">"2014-05-27T02:31:35Z"</span>,</div><div class="line">  <span class="string">"updated_at"</span>: <span class="string">"2015-08-29T14:01:51Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>model class写为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Gist</span> </span>&#123;  </div><div class="line">  Map&lt;String, GistFile&gt; files;</div><div class="line">  Date createdAt;</div><div class="line">  Date updatedAt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GistFile</span> </span>&#123;  </div><div class="line">  String type;</div><div class="line">  String content;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后<code>Gist gist = gson.fromJson(json, Gist.class);</code></p>
<p>gradle指定输出路径：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> outputPathName = <span class="string">"/Users/jjx/Downloads/Package/some.apk"</span></div><div class="line"><span class="comment">//这是应用编译完成</span></div><div class="line">applicationVariants.all &#123; variant -&gt;</div><div class="line">     variant.outputs.each  &#123; output -&gt;</div><div class="line">           <span class="comment">//开始输出</span></div><div class="line">           output.outputFile = <span class="keyword">new</span> File(outputPathName)</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>final空白，final变量声明的时候先不赋值，后续再赋值。但是一个final变量只能赋值一次。<br>final表示终态，在定义的时候哪怕给个null，一旦给定后就不可再更改。 所以变量尽量不要用null赋值。<br>对于被static和final修饰过的实例常量，实例本身不能再改变了，但对于一些容器类型（比如，ArrayList、HashMap）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象，这一点在编程中用到很多。<br><a href="http://lavasoft.blog.51cto.com/62575/18771" target="_blank" rel="external">http://lavasoft.blog.51cto.com/62575/18771</a><br><a href="http://www.importnew.com/6579.html" target="_blank" rel="external">http://www.importnew.com/6579.html</a></p>
<h3 id="01-22号-周五"><a href="#01-22号-周五" class="headerlink" title="01/22号  周五"></a>01/22号  周五</h3><p>alarmmanager是系统服务，设置以后不管你的app是否启动，都会定时发送广播。但是关机重启后alarmmanager就会被清除。像小米这种使用系统清理杀进程后，也会失效，但是这跟你app被杀死无关，这是因为小米系统清理后把三方app设置的定时清除掉了而已。<br><a href="http://stackoverflow.com/questions/8774030/alarmmanager-object-after-turning-off-and-on-the-phone" target="_blank" rel="external">http://stackoverflow.com/questions/8774030/alarmmanager-object-after-turning-off-and-on-the-phone</a><br>开机自启动服务<br><a href="http://stackoverflow.com/questions/6391902/how-to-start-an-application-on-startup" target="_blank" rel="external">http://stackoverflow.com/questions/6391902/how-to-start-an-application-on-startup</a></p>
<h3 id="01-27号-周三"><a href="#01-27号-周三" class="headerlink" title="01/27号  周三"></a>01/27号  周三</h3><p>Android studio 用Git提交的时候有shelve和stash选项，有什么不同呢。<br>不同就在于他们生成patches和应用patches的方式上：<br>stashed：changes生成patches是git自己做的，而且应用的时候，你不需要ide。<br>shelving：changes生成patches是ide帮你搞定的，应用patches也得需要ide，不用也是可行的，但你得额外做些操作。<br>rebase是新建的分支作为基线插到原基线前面，先把新分支的串行合并，再把原基线的合并，可能会需要解决多次冲突。<br>merge是按时间顺序捏合，解决一次冲突就好了。提交较多的时候最好用merge，不然用rebase会解决多次冲突。<br><a href="http://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase" target="_blank" rel="external">http://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase</a><br>路径相关<br>“.”  代表目前所在的目录。<br>“./SubDir2”  代表目前目录下的SubDir2。<br>“..”  代表上一层目录。<br>“/“  代表根目录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年第一篇笔记，也是总第6篇笔记。加油，随笔。&lt;/p&gt;
&lt;h3 id=&quot;01-02号-周六&quot;&gt;&lt;a href=&quot;#01-02号-周六&quot; class=&quot;headerlink&quot; title=&quot;01/02号  周六&quot;&gt;&lt;/a&gt;01/02号  周六&lt;/h3&gt;&lt;p&gt;物联网（Internet of Things）简写作Iots &lt;/p&gt;
&lt;p&gt;onMesure会被调用多次，onLayout会被调用一次，更轻量级，所以可以把耗时处理操作尽量从onMeasure往onLayout中移过来。&lt;br&gt;requestLayout只重新布局，invalidate会调用ondraw，postInvalidate供子线程调用。&lt;br&gt;onDraw只考虑绘制内容区域，背景什么的不要管。&lt;br&gt;一般情况下:自定义view考虑onMeasure和onDraw;自定义viewGroup考虑onMeasure和onLayout,不需要考虑onDraw。有交互的时候考虑onTouchEvent。&lt;br&gt;第一个手指触控时候，第二个手指触控会夺取控制权，这时候第三个手指触控会第三个手指拥有控制权，此时第三个手指抬起后，第一个手机将获得控制权。&lt;br&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>GoodBye2015,Hello2016</title>
    <link href="http://jijiaxin89.com/2016/01/01/GoodBye2015-Hello2016/"/>
    <id>http://jijiaxin89.com/2016/01/01/GoodBye2015-Hello2016/</id>
    <published>2016-01-01T03:01:51.000Z</published>
    <updated>2017-03-15T16:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>2015年，终于还是随风而逝了。<br>今天一早刷刷微博，看了几篇同行们的年终总结，感慨挺多的;一年一年，也挺忙碌的，适时梳理、回忆一下过往的生活有助于展望未来，2016，Good Morning。</p>
<h3 id="回忆过往"><a href="#回忆过往" class="headerlink" title="回忆过往"></a>回忆过往</h3><p>对于2015，没有太多遗憾，这一年，成长还算挺多，也还顺利。</p>
<h4 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h4><p>先说说工作吧，过去一年应该可以说是成长了不少，技术水平稳步提升。比起毕业以来前两年那不堪回首的岁月，15年是努力踏实的一年，付出也收到了薪水上面的回报。15年5月份换了工作，前东家是我来北京的第一个东家，说起来只有感激，虽说实质性的福利基本没有，但是工作的自由度给了我充足的成长空间，leader是一个很好很随和的人，对我也很包容，是我工作上的一个贵人，他有一个很好听的名字，诗川，谢谢你。5月份组里另外一个小伙伴离职南下发展去了，我就随后来到了现在的东家。刚来到这儿，觉得公司氛围真是太棒了，扁平化，工程师文化，充满激情的一帮人，除了工作，大家也经常一起团建游玩，中午也是围一桌一起下馆子，总之就是超有爱的团队。一转眼，在这儿工作大半年了也，挺开心的，可是觉得自己为公司做的却还不够多。只是最近几个同事的相继离职，挺遗憾的。愿新的一年里，大家都好，公司发展的更好！<br>虽然是做技术的，但是我不想把这个总结写成技术类的。。总结。所以就简单提一下吧，过去的一年，微博，博客，github，经常去逛，学到了很多，只是还没有奉献出什么干货，希望来年能有所改善吧。<br><a id="more"></a></p>
<h4 id="关于情感"><a href="#关于情感" class="headerlink" title="关于情感"></a>关于情感</h4><p>从早上一边看着同事们在微信群抢红包，热闹起哄，我就开始写了，一直到现在快1点了，红包群早已寂寥，也没写多少。。。。这感觉你懂得，憋不出来。思绪乱纷纷，提笔又忘字，主要是因为这块。这一年打电话的时候妈妈基本不提别事，都是催婚。。。。写到这，突然特别想家，想爸妈，爸妈很辛苦，我能为爸妈做的却是那么少，很惭愧。曾经心比天高，而今不得不认识到自己的力量是那么渺小，只有不断努力不断努力才能让一切更好那么一点。所以，只有加油咯。<br>对于另一半，自己始终还没能弄的很明白。一个人久了，也不是很会跟女孩子沟通了，尤其越是在意的女孩，越不能放开的表现真实自己，展现出来的就只是腼腆扭捏了，想想这可能正是我单身到现在的一个原因吧。<br>希望找到的是互相欣赏，互相爱慕的那个所谓的灵魂伴侣吧。理想就是相看两不厌，寂静欢喜的那种；现实就是这种高逼格对我来说是奢望。。。老大不小了，我隐隐觉得快到了将就的那个点了。</p>
<h4 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h4><p>我发现我真的是一个很专注的人，大方向超专注，小方向经常走神。不管是高中专注于刷卷子，还是大学时候专注于打游戏，我是比较有恒心的，这点还是很满意的。现在对于做技术，已经渐渐由排斥转为现在的伪热爱。<br>我最喜欢的，还是文学，虽然为了生活，没有太多时间留给诗词歌赋。但是在我找到媳妇以前，这绝对是我毕生的真爱噢。我觉得诗词就天生的美好，很希望能像古时候隐士那样生活，徜徉于山林之间，吟吟诗作作对。<br><a href="http://jijiaxin89.com/2015/09/19/%E5%8F%AA%E8%A8%80%E7%89%87%E8%AF%AD%E4%B9%9F%E5%BE%88%E7%BE%8E/">多丰富一下只言片语</a><br>过去的一年看了好多美剧，《冰与火之歌》《行尸走肉》《丧尸国度》都很好看。</p>
<h3 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h3><h4 id="改变与超越"><a href="#改变与超越" class="headerlink" title="改变与超越"></a>改变与超越</h4><ul>
<li>停止任何无意义的抱怨，提高执行力，多写代码，多产出，工作上要更踏实一些。</li>
<li>改掉见了女孩子支支吾吾腼腆的毛病，好好找个值得相伴一生的女孩。</li>
<li>抽时间多学习专业以外的东西，做一个丰富多彩的人。</li>
</ul>
<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>新的一年里，多赚钱，找个媳妇，对亲人多关爱一些，做一个好人。</p>
<h4 id="祈愿"><a href="#祈愿" class="headerlink" title="祈愿"></a>祈愿</h4><p>愿亲人们身体健康，万事如意。</p>
<p>就这样吧，有些也并不想写出来了，或许这就是因为成长了吧，就让它与2015一起随风而逝吧，过去的一年虽然没有什么特别闪耀的东西，总之，还好。现在略微有点淡淡的忧桑，不知道说什么了。2016，加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2015年，终于还是随风而逝了。&lt;br&gt;今天一早刷刷微博，看了几篇同行们的年终总结，感慨挺多的;一年一年，也挺忙碌的，适时梳理、回忆一下过往的生活有助于展望未来，2016，Good Morning。&lt;/p&gt;
&lt;h3 id=&quot;回忆过往&quot;&gt;&lt;a href=&quot;#回忆过往&quot; class=&quot;headerlink&quot; title=&quot;回忆过往&quot;&gt;&lt;/a&gt;回忆过往&lt;/h3&gt;&lt;p&gt;对于2015，没有太多遗憾，这一年，成长还算挺多，也还顺利。&lt;/p&gt;
&lt;h4 id=&quot;关于工作&quot;&gt;&lt;a href=&quot;#关于工作&quot; class=&quot;headerlink&quot; title=&quot;关于工作&quot;&gt;&lt;/a&gt;关于工作&lt;/h4&gt;&lt;p&gt;先说说工作吧，过去一年应该可以说是成长了不少，技术水平稳步提升。比起毕业以来前两年那不堪回首的岁月，15年是努力踏实的一年，付出也收到了薪水上面的回报。15年5月份换了工作，前东家是我来北京的第一个东家，说起来只有感激，虽说实质性的福利基本没有，但是工作的自由度给了我充足的成长空间，leader是一个很好很随和的人，对我也很包容，是我工作上的一个贵人，他有一个很好听的名字，诗川，谢谢你。5月份组里另外一个小伙伴离职南下发展去了，我就随后来到了现在的东家。刚来到这儿，觉得公司氛围真是太棒了，扁平化，工程师文化，充满激情的一帮人，除了工作，大家也经常一起团建游玩，中午也是围一桌一起下馆子，总之就是超有爱的团队。一转眼，在这儿工作大半年了也，挺开心的，可是觉得自己为公司做的却还不够多。只是最近几个同事的相继离职，挺遗憾的。愿新的一年里，大家都好，公司发展的更好！&lt;br&gt;虽然是做技术的，但是我不想把这个总结写成技术类的。。总结。所以就简单提一下吧，过去的一年，微博，博客，github，经常去逛，学到了很多，只是还没有奉献出什么干货，希望来年能有所改善吧。&lt;br&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="年终总结" scheme="http://jijiaxin89.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp使用小结</title>
    <link href="http://jijiaxin89.com/2015/12/26/OkHttp-use-summary/"/>
    <id>http://jijiaxin89.com/2015/12/26/OkHttp-use-summary/</id>
    <published>2015-12-26T12:57:14.000Z</published>
    <updated>2017-03-15T16:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp应该是目前最完善，也是相当流行的一个底层网络请求库。Google都在用，所以有必要深入了解一下，刚好最近在重构公司项目的网络层，就顺便梳理一下。<br>———–12.29————<br>最近暂时没有时间详细整理了。就简单过了一下官方文档。<br>以下取自官方文档。</p>
<h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><h4 id="同步Get方法"><a href="#同步Get方法" class="headerlink" title="同步Get方法"></a>同步Get方法</h4><p>以下样例代码下载一个文件，打印headers，打印字符串形式的 response body </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    Response response = client.newCall(request).execute();</div><div class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">    Headers responseHeaders = response.headers();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">      System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    System.out.println(response.body().string());</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>注意： response body中的<code>string()</code>方法对小文件是很方便高效的，但是当response body 大于1M时，避免用<code>string()</code>，因为它会加载整个文件到内存，此时应该把body用stream的形式来处理.</p>
<h4 id="异步Get方法"><a href="#异步Get方法" class="headerlink" title="异步Get方法"></a>异步Get方法</h4><p>在工作线程下载一个文件，并且当response准备好了的时候回调Callback。 response headers 准备好了的时候，就走回调。读response body 也会阻塞线程，OkHttp暂时没有提供额外的异步<br>APIs来获得response body。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException throwable)</span> </span>&#123;</div><div class="line">        throwable.printStackTrace();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">        Headers responseHeaders = response.headers();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">          System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(response.body().string());</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="Accessing-Headers"><a href="#Accessing-Headers" class="headerlink" title="Accessing Headers"></a>Accessing Headers</h4><p>典型的HTTP请求头，像<code>Map&lt;String, String&gt;</code>那样工作，每个field有一个值或者没有，但是有的headers允许有多个值,就像Guava’s Multimap.比如，一个HTTP response 提供多个多样的headers是合法且普遍的。 OkHttp’s APIs 兼容这两种情况。<br>注意：当写request headers时，<code>header(name, value)</code> 设置唯一的键值对，这会覆盖已有的值。而用方法 <code>addHeader(name, value)</code> 来添加header时，不会移除已有的header。<br>相应的<code>header(name)</code>来获取最后的这个name的相应value，通常这也是唯一的，如果没有就返回null 。<code>headers(name)</code>用来read所有的field的值，已list的形式。<br>想要看所有的headers，使用支持通过索引访问的类<code>Headers</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"https://api.github.com/repos/square/okhttp/issues"</span>)</div><div class="line">      .header(<span class="string">"User-Agent"</span>, <span class="string">"OkHttp Headers.java"</span>)</div><div class="line">      .addHeader(<span class="string">"Accept"</span>, <span class="string">"application/json; q=0.5"</span>)</div><div class="line">      .addHeader(<span class="string">"Accept"</span>, <span class="string">"application/vnd.github.v3+json"</span>)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  System.out.println(<span class="string">"Server: "</span> + response.header(<span class="string">"Server"</span>));</div><div class="line">  System.out.println(<span class="string">"Date: "</span> + response.header(<span class="string">"Date"</span>));</div><div class="line">  System.out.println(<span class="string">"Vary: "</span> + response.headers(<span class="string">"Vary"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Posting-a-String"><a href="#Posting-a-String" class="headerlink" title="Posting a String"></a>Posting a String</h4><p>由于这个request body同时要完全加载到内存，所以避免用个API来posting大于1M的文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN</div><div class="line">    = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  String postBody = <span class="string">""</span></div><div class="line">      + <span class="string">"Releases\n"</span></div><div class="line">      + <span class="string">"--------\n"</span></div><div class="line">      + <span class="string">"\n"</span></div><div class="line">      + <span class="string">" * _1.0_ May 6, 2013\n"</span></div><div class="line">      + <span class="string">" * _1.1_ June 15, 2013\n"</span></div><div class="line">      + <span class="string">" * _1.2_ August 11, 2013\n"</span>;</div><div class="line"></div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"https://api.github.com/markdown/raw"</span>)</div><div class="line">      .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Post-Streaming"><a href="#Post-Streaming" class="headerlink" title="Post Streaming"></a>Post Streaming</h4><p>一下示例代码使用到了Okio的buffered sink，你可能更喜欢使用OutputStream，你可以通过<code>BufferedSink.outputStream()</code>来获得。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN</div><div class="line">    = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  RequestBody requestBody = <span class="keyword">new</span> RequestBody() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> MEDIA_TYPE_MARKDOWN;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      sink.writeUtf8(<span class="string">"Numbers\n"</span>);</div><div class="line">      sink.writeUtf8(<span class="string">"-------\n"</span>);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">997</span>; i++) &#123;</div><div class="line">        sink.writeUtf8(String.format(<span class="string">" * %s = %s\n"</span>, i, factor(i)));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">factor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">int</span> x = n / i;</div><div class="line">        <span class="keyword">if</span> (x * i == n) <span class="keyword">return</span> factor(x) + <span class="string">" × "</span> + i;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> Integer.toString(n);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"https://api.github.com/markdown/raw"</span>)</div><div class="line">      .post(requestBody)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Posting文件"><a href="#Posting文件" class="headerlink" title="Posting文件"></a>Posting文件</h4><p>简单<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN</div><div class="line">    = MediaType.parse(<span class="string">"text/x-markdown; charset=utf-8"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  File file = <span class="keyword">new</span> File(<span class="string">"README.md"</span>);</div><div class="line"></div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"https://api.github.com/markdown/raw"</span>)</div><div class="line">      .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Posting-form-parameters-格式化参数"><a href="#Posting-form-parameters-格式化参数" class="headerlink" title="Posting form parameters(格式化参数)"></a>Posting form parameters(格式化参数)</h4><p>用FormEncodingBuilder来构建一个request body，像HTML的<form>标签一样工作，键值对将以兼容HTML的URL编码方式被组织。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  RequestBody formBody = <span class="keyword">new</span> FormEncodingBuilder()</div><div class="line">      .add(<span class="string">"search"</span>, <span class="string">"Jurassic Park"</span>)</div><div class="line">      .build();</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"https://en.wikipedia.org/w/index.php"</span>)</div><div class="line">      .post(formBody)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure></form></p>
<h4 id="Posting一个multipart-request-复合请求"><a href="#Posting一个multipart-request-复合请求" class="headerlink" title="Posting一个multipart request(复合请求)"></a>Posting一个multipart request(复合请求)</h4><p>MultipartBuilder可以构建复杂的request bodies，兼容html文件上传forms。复合请求的每个request body分别可以定义自己的headers，如果存在，这些headers分别描述相应的body，例如Content-Disposition。The Content-Length and Content-Type headers 会自动添加。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMGUR_CLIENT_ID = <span class="string">"..."</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MEDIA_TYPE_PNG = MediaType.parse(<span class="string">"image/png"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="comment">// Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image</span></div><div class="line">  RequestBody requestBody = <span class="keyword">new</span> MultipartBuilder()</div><div class="line">      .type(MultipartBuilder.FORM)</div><div class="line">      .addPart(</div><div class="line">          Headers.of(<span class="string">"Content-Disposition"</span>, <span class="string">"form-data; name=\"title\""</span>),</div><div class="line">          RequestBody.create(<span class="keyword">null</span>, <span class="string">"Square Logo"</span>))</div><div class="line">      .addPart(</div><div class="line">          Headers.of(<span class="string">"Content-Disposition"</span>, <span class="string">"form-data; name=\"image\""</span>),</div><div class="line">          RequestBody.create(MEDIA_TYPE_PNG, <span class="keyword">new</span> File(<span class="string">"website/static/logo-square.png"</span>)))</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .header(<span class="string">"Authorization"</span>, <span class="string">"Client-ID "</span> + IMGUR_CLIENT_ID)</div><div class="line">      .url(<span class="string">"https://api.imgur.com/3/image"</span>)</div><div class="line">      .post(requestBody)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="用Gson解析JSON返回结果"><a href="#用Gson解析JSON返回结果" class="headerlink" title="用Gson解析JSON返回结果"></a>用Gson解析JSON返回结果</h3><p>Gson是一个便利的API用来转换JSON和java对象。<br>Note that ResponseBody.charStream() uses the Content-Type response header to select which charset to use when decoding the response body. It defaults to UTF-8 if no charset is specified.<br>注意<code>ResponseBody.charStream()</code>根据返回头的<code>Content-Type</code>来选择相应的编码方式，来解码response body。如果没有定义charset，默认是用UTF-8。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"https://api.github.com/gists/c2a7c39532239ff261be"</span>)</div><div class="line">      .build();</div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  Gist gist = gson.fromJson(response.body().charStream(), Gist.class);</div><div class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, GistFile&gt; entry : gist.files.entrySet()) &#123;</div><div class="line">    System.out.println(entry.getKey());</div><div class="line">    System.out.println(entry.getValue().content);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Gist</span> </span>&#123;</div><div class="line">  Map&lt;String, GistFile&gt; files;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GistFile</span> </span>&#123;</div><div class="line">  String content;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Response-Caching"><a href="#Response-Caching" class="headerlink" title="Response Caching"></a>Response Caching</h3><p>缓存请求结果，你需要一个你可以读写的限制大小的缓存目录，缓存目录应该是私有的，禁止未信任的程序随便读取。<br>Response caching uses HTTP headers for all configuration. You can add request headers like Cache-Control: max-stale=3600 and OkHttp’s cache will honor them. Your webserver configures how long responses are cached with its own response headers, like Cache-Control: max-age=9600. There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.<br>Response caching完全用HTTP headers来配置，你可以添加像这样的请求头：Cache-Control: max-stale=3600，你的web服务器可以这样的请求头Cache-Control: max-age=9600来配置请求结果缓存时间。可以设置相应的headers来强制缓存response，force a network response, or force the network response to be validated(经过验证的) with a conditional GET.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CacheResponse</span><span class="params">(File cacheDirectory)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="keyword">int</span> cacheSize = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 10 MiB</span></div><div class="line">  Cache cache = <span class="keyword">new</span> Cache(cacheDirectory, cacheSize);</div><div class="line"></div><div class="line">  client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">  client.setCache(cache);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response1 = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response1.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response1);</div><div class="line"></div><div class="line">  String response1Body = response1.body().string();</div><div class="line">  System.out.println(<span class="string">"Response 1 response:          "</span> + response1);</div><div class="line">  System.out.println(<span class="string">"Response 1 cache response:    "</span> + response1.cacheResponse());</div><div class="line">  System.out.println(<span class="string">"Response 1 network response:  "</span> + response1.networkResponse());</div><div class="line"></div><div class="line">  Response response2 = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response2.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response2);</div><div class="line"></div><div class="line">  String response2Body = response2.body().string();</div><div class="line">  System.out.println(<span class="string">"Response 2 response:          "</span> + response2);</div><div class="line">  System.out.println(<span class="string">"Response 2 cache response:    "</span> + response2.cacheResponse());</div><div class="line">  System.out.println(<span class="string">"Response 2 network response:  "</span> + response2.networkResponse());</div><div class="line"></div><div class="line">  System.out.println(<span class="string">"Response 2 equals Response 1? "</span> + response1Body.equals(response2Body));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  阻止使用缓存的response，使用CacheControl.FORCE_NETWORK。阻止使用网络，使用 CacheControl.FORCE_CACHE。注意，如果你使用FORCE_CACHE而response需要网络支持的话，OkHttp 将返回一个 504 Unsatisfiable Request response.</p>
<h3 id="取消一个call"><a href="#取消一个call" class="headerlink" title="取消一个call"></a>取消一个call</h3><p>  用Call.cancel()会立刻停止一个进行中的请求，如果一个线程正在writing一个request，或者在reading一个response，将会抛IOException。<br>  如果你的用户操作离开了app，所有的同步异步请求都应该取消。<br>  你可以用tags来同时取消多个请求，用RequestBuilder.tag(tag)在创建请求的时候指定一个tag，用<code>OkHttpClient.cancel(tag)</code>取消所有有这个tag的请求。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">1</span>);</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"http://httpbin.org/delay/2"</span>) <span class="comment">// This URL is served with a 2 second delay.</span></div><div class="line">      .build();</div><div class="line"></div><div class="line">  <span class="keyword">final</span> <span class="keyword">long</span> startNanos = System.nanoTime();</div><div class="line">  <span class="keyword">final</span> Call call = client.newCall(request);</div><div class="line"></div><div class="line">  <span class="comment">// Schedule a job to cancel the call in 1 second.</span></div><div class="line">  executor.schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      System.out.printf(<span class="string">"%.2f Canceling call.%n"</span>, (System.nanoTime() - startNanos) / <span class="number">1e9f</span>);</div><div class="line">      call.cancel();</div><div class="line">      System.out.printf(<span class="string">"%.2f Canceled call.%n"</span>, (System.nanoTime() - startNanos) / <span class="number">1e9f</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    System.out.printf(<span class="string">"%.2f Executing call.%n"</span>, (System.nanoTime() - startNanos) / <span class="number">1e9f</span>);</div><div class="line">    Response response = call.execute();</div><div class="line">    System.out.printf(<span class="string">"%.2f Call was expected to fail, but completed: %s%n"</span>,</div><div class="line">        (System.nanoTime() - startNanos) / <span class="number">1e9f</span>, response);</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    System.out.printf(<span class="string">"%.2f Call failed as expected: %s%n"</span>,</div><div class="line">        (System.nanoTime() - startNanos) / <span class="number">1e9f</span>, e);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Timeouts"><a href="#Timeouts" class="headerlink" title="Timeouts"></a>Timeouts</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConfigureTimeouts</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">  client.setConnectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">  client.setWriteTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">  client.setReadTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"http://httpbin.org/delay/2"</span>) <span class="comment">// This URL is served with a 2 second delay.</span></div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  System.out.println(<span class="string">"Response completed: "</span> + response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Per-call-Configuration-某个请求特殊配置"><a href="#Per-call-Configuration-某个请求特殊配置" class="headerlink" title="Per-call Configuration 某个请求特殊配置"></a>Per-call Configuration 某个请求特殊配置</h3><p>  所有的HTTP client配置都在OkHttpClient，包括代理，超时，缓存，你想为单个请求改变配置的话，clone the OkHttpClient，这个会返回一个浅(shallow)copy让你来单独定制，如下，你make了一个500ms超时的和3000ms超时的请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"http://httpbin.org/delay/1"</span>) <span class="comment">// This URL is served with a 1 second delay.</span></div><div class="line">      .build();</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    OkHttpClient cloned = client.clone(); <span class="comment">// Clone to make a customized OkHttp for this request.</span></div><div class="line">    cloned.setReadTimeout(<span class="number">500</span>, TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line">    Response response = cloned.newCall(request).execute();</div><div class="line">    System.out.println(<span class="string">"Response 1 succeeded: "</span> + response);</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    System.out.println(<span class="string">"Response 1 failed: "</span> + e);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    OkHttpClient cloned = client.clone(); <span class="comment">// Clone to make a customized OkHttp for this request.</span></div><div class="line">    cloned.setReadTimeout(<span class="number">3000</span>, TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line">    Response response = cloned.newCall(request).execute();</div><div class="line">    System.out.println(<span class="string">"Response 2 succeeded: "</span> + response);</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    System.out.println(<span class="string">"Response 2 failed: "</span> + e);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新版3.0修改为如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"http://httpbin.org/delay/1"</span>) <span class="comment">// This URL is served with a 1 second delay.</span></div><div class="line">      .build();</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// Copy to customize OkHttp for this request.</span></div><div class="line">    OkHttpClient copy = client.newBuilder()</div><div class="line">        .readTimeout(<span class="number">500</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    Response response = copy.newCall(request).execute();</div><div class="line">    System.out.println(<span class="string">"Response 1 succeeded: "</span> + response);</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    System.out.println(<span class="string">"Response 1 failed: "</span> + e);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// Copy to customize OkHttp for this request.</span></div><div class="line">    OkHttpClient copy = client.newBuilder()</div><div class="line">        .readTimeout(<span class="number">3000</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    Response response = copy.newCall(request).execute();</div><div class="line">    System.out.println(<span class="string">"Response 2 succeeded: "</span> + response);</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    System.out.println(<span class="string">"Response 2 failed: "</span> + e);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Handling-authentication-身份验证"><a href="#Handling-authentication-身份验证" class="headerlink" title="Handling authentication(身份验证)"></a>Handling authentication(身份验证)</h3><p>OkHttp可以自动重操作没有验证通过的请求，当一个response是401 Not Authorized(未授权，未认可)，表示认证者需要你提供相应证书，实现是应该新建一个带有相应缺失证书的请求，如果获取不到证书，返回null跳过retry。<br>Use Response.challenges() to get the schemes and realms of any authentication challenges.<br>When fulfilling a Basic challenge, use Credentials.basic(username, password) to encode the request header.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  client.setAuthenticator(<span class="keyword">new</span> Authenticator() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Request <span class="title">authenticate</span><span class="params">(Proxy proxy, Response response)</span> </span>&#123;</div><div class="line">      System.out.println(<span class="string">"Authenticating for response: "</span> + response);</div><div class="line">      System.out.println(<span class="string">"Challenges: "</span> + response.challenges());</div><div class="line">      String credential = Credentials.basic(<span class="string">"jesse"</span>, <span class="string">"password1"</span>);</div><div class="line">      <span class="keyword">return</span> response.request().newBuilder()</div><div class="line">          .header(<span class="string">"Authorization"</span>, credential)</div><div class="line">          .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Request <span class="title">authenticateProxy</span><span class="params">(Proxy proxy, Response response)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// Null indicates no attempt to authenticate.</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">      .url(<span class="string">"http://publicobject.com/secrets/hellosecret.txt"</span>)</div><div class="line">      .build();</div><div class="line"></div><div class="line">  Response response = client.newCall(request).execute();</div><div class="line">  <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"></div><div class="line">  System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  身份验证失效的时候就别多次retry了，return null放弃就好。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (credential.equals(response.request().header(<span class="string">"Authorization"</span>))) &#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// If we already failed with these credentials, don't retry.</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>You may also skip the retry when you’ve hit an application-defined attempt limit:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (responseCount(response) &gt;= <span class="number">3</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// If we've failed 3 times, give up.</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">responseCount</span><span class="params">(Response response)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> ((response = response.priorResponse()) != <span class="keyword">null</span>) &#123;</div><div class="line">      result++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>done!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp应该是目前最完善，也是相当流行的一个底层网络请求库。Google都在用，所以有必要深入了解一下，刚好最近在重构公司项目的网络层，就顺便梳理一下。&lt;br&gt;———–12.29————&lt;br&gt;最近暂时没有时间详细整理了。就简单过了一下官方文档。&lt;br&gt;以下取自官方文档。&lt;/p&gt;
&lt;h3 id=&quot;网络请求&quot;&gt;&lt;a href=&quot;#网络请求&quot; class=&quot;headerlink&quot; title=&quot;网络请求&quot;&gt;&lt;/a&gt;网络请求&lt;/h3&gt;&lt;h4 id=&quot;同步Get方法&quot;&gt;&lt;a href=&quot;#同步Get方法&quot; class=&quot;headerlink&quot; title=&quot;同步Get方法&quot;&gt;&lt;/a&gt;同步Get方法&lt;/h4&gt;&lt;p&gt;以下样例代码下载一个文件，打印headers，打印字符串形式的 response body &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; OkHttpClient client = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OkHttpClient();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Request request = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Request.Builder()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .url(&lt;span class=&quot;string&quot;&gt;&quot;http://publicobject.com/helloworld.txt&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .build();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Response response = client.newCall(request).execute();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!response.isSuccessful()) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;string&quot;&gt;&quot;Unexpected code &quot;&lt;/span&gt; + response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Headers responseHeaders = response.headers();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; responseHeaders.size(); i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      System.out.println(responseHeaders.name(i) + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + responseHeaders.value(i));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System.out.println(response.body().string());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android框架与开源库" scheme="http://jijiaxin89.com/categories/Android%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔（伍）</title>
    <link href="http://jijiaxin89.com/2015/12/16/Life-Essay-five/"/>
    <id>http://jijiaxin89.com/2015/12/16/Life-Essay-five/</id>
    <published>2015-12-16T03:05:42.000Z</published>
    <updated>2017-03-15T16:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-16号-周三-冷风呼呼吹"><a href="#12-16号-周三-冷风呼呼吹" class="headerlink" title="12/16号  周三 冷风呼呼吹"></a>12/16号  周三 冷风呼呼吹</h3><p>最近忙着找房子租房子，搬家的事，团团转，苦不堪言，北漂不易，且过且珍惜。<br>这周六就要集中搬过来了，离公司近了，就不用每天路上“观光”4小时了。<br>房租翻了一番，条件却差了，仅仅一个床位的空间。。。我要好好努力工作，争取早日买上自己的房子。</p>
<h3 id="12-18号-周五-凉风有心"><a href="#12-18号-周五-凉风有心" class="headerlink" title="12/18号  周五 凉风有心"></a>12/18号  周五 凉风有心</h3><p>当年相知未回首，空谈年华似水流。</p>
<a id="more"></a>
<h3 id="12-20号-周天-独在异乡为异客"><a href="#12-20号-周天-独在异乡为异客" class="headerlink" title="12/20号  周天  独在异乡为异客"></a>12/20号  周天  独在异乡为异客</h3><p>2016年即将来临，转眼就要到27周岁了，只能说是万分惆怅。至今还没有个安稳的家。<br>寂寞不可怕，习惯了寂寞才可怕。<br>偶尔也会想想，还是回山东吧，稳稳的安宁。但是人在江湖，身不由己，想想小时候看武侠剧很多愤愤不平的剧情其实都有它如此这般的原因，但是不懂，因为那时还小，生活也是如此，大多数的人并不是想做什么就可以去做的。<br>洒脱。<br>假如爱有天意。</p>
<h3 id="12-21号-周一-忘记烦忧得方法就是让自己忙起来"><a href="#12-21号-周一-忘记烦忧得方法就是让自己忙起来" class="headerlink" title="12/21号  周一 忘记烦忧得方法就是让自己忙起来"></a>12/21号  周一 忘记烦忧得方法就是让自己忙起来</h3><p>我天性不宜交际。在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味。可是我既不愿忍受对方的乏味，也不愿费劲使自己显得有趣，那都太累了。我独处时最轻松，因为我不觉得自己乏味，即使乏味，也自己承受，不累及他人，无需感到不安。——周国平</p>
<p>年少时，我们总以为生活就是琴棋书画诗酒花；长大后才发现，终是抵不过柴米油盐酱醋茶。</p>
<h3 id="12-23号-周三"><a href="#12-23号-周三" class="headerlink" title="12/23号  周三"></a>12/23号  周三</h3><p>最近团队氛围很不好，工程师文化没有了，也挺影响心情的。。。不管外界如何变化，我永坚持自己的信仰。</p>
<p>想家了。。。临近过年，想家的感觉越发强烈。不想让爸妈那么辛苦的干活了，但是他们不听，总是说你先找个媳妇吧，还得买房子，不干能行吗。唉。怪只怪自己不够优秀，没有赚足够的钱减轻父母的负担。</p>
<p>烦。</p>
<p>生活不容易啊。人生得一知己足矣，斯世当以同怀视之。</p>
<h3 id="12-25号-周五"><a href="#12-25号-周五" class="headerlink" title="12/25号  周五"></a>12/25号  周五</h3><p>梦想还是要有的，万一实现了呢。</p>
<p>需认准目标，不跟风不动摇。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12-16号-周三-冷风呼呼吹&quot;&gt;&lt;a href=&quot;#12-16号-周三-冷风呼呼吹&quot; class=&quot;headerlink&quot; title=&quot;12/16号  周三 冷风呼呼吹&quot;&gt;&lt;/a&gt;12/16号  周三 冷风呼呼吹&lt;/h3&gt;&lt;p&gt;最近忙着找房子租房子，搬家的事，团团转，苦不堪言，北漂不易，且过且珍惜。&lt;br&gt;这周六就要集中搬过来了，离公司近了，就不用每天路上“观光”4小时了。&lt;br&gt;房租翻了一番，条件却差了，仅仅一个床位的空间。。。我要好好努力工作，争取早日买上自己的房子。&lt;/p&gt;
&lt;h3 id=&quot;12-18号-周五-凉风有心&quot;&gt;&lt;a href=&quot;#12-18号-周五-凉风有心&quot; class=&quot;headerlink&quot; title=&quot;12/18号  周五 凉风有心&quot;&gt;&lt;/a&gt;12/18号  周五 凉风有心&lt;/h3&gt;&lt;p&gt;当年相知未回首，空谈年华似水流。&lt;/p&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>技术随笔（伍）</title>
    <link href="http://jijiaxin89.com/2015/12/16/Notes-on-Tech-five/"/>
    <id>http://jijiaxin89.com/2015/12/16/Notes-on-Tech-five/</id>
    <published>2015-12-16T03:04:36.000Z</published>
    <updated>2017-03-15T16:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-16号-周三"><a href="#12-16号-周三" class="headerlink" title="12/16号  周三"></a>12/16号  周三</h3><p>最近刚换了studio+git。</p>
<p>//检出 本地仓库<br>git clone /path/to/repository<br>//远程,例如：<br>git clone username@host:/path/to/repository<br>git clone android_git@10.96.111.11:/data/android/git/demo_android.git </p>
<a id="more"></a>
<p>//新建仓库<br>git init</p>
<p>// 上传  work dir —and–&gt; index(暂存区) –commit–&gt; HEAD<br>//添加到暂存区<br>git add <filename><br>git add *<br>// 提交到 HEAD<br>git commit -m “代码提交信息”<br>// 推给远端仓库<br>git push origin master<br>// 首次上传到sever<br>git remote add origin <server></server></filename></p>
<p>//更新到本地仓库<br>git pull</p>
<p>//查看git配置 git config –list</p>
<h3 id="12-20号-周天"><a href="#12-20号-周天" class="headerlink" title="12/20号  周天"></a>12/20号  周天</h3><p>正则表达式引擎主要分为两大类:一种是DFA，一种是NFA。<br>NFA 引擎运行所谓的“贪婪的”匹配回溯算法，以指定顺序测试正则表达式的所有可能的扩展并接受第一个匹配项。(NFA)以表达式为主导，反复测试字符串，这样同样一个字符串有可能被反复测试了很多次！<br>DFA 引擎在线性时状态下执行，因为它们不要求回溯（并因此它们永远不测试相同的字符两次）。(DFA)以文本为主导！<br>使用DFA引擎的程序主要有：awk,egrep,flex,lex,MySQL,Procmail等；<br>使用传统型NFA引擎的程序主要有：GNU Emacs,Java,ergp,less,more,.NET语言,PCRE library,Perl,PHP,Python,Ruby,sed,vi；<br>使用POSIX NFA引擎的程序主要有：mawk,Mortice Kern Systems’ utilities,GNU Emacs(使用时可以明确指定)；</p>
<p>正则表达式[2]  由一些普通字符和一些元字符（metacharacters）组成。普通字符包括大小写的字母和数字，而元字符则具有特殊的含义.<br>正则匹配的时候默认是贪婪模式，匹配最多；字符后面跟<code>？</code>时候,变为非贪婪模式，尽量少的匹配。<br><a href="http://baike.baidu.com/view/94238.htm" target="_blank" rel="external">百科</a></p>
<h3 id="12-21号-周一"><a href="#12-21号-周一" class="headerlink" title="12/21号  周一"></a>12/21号  周一</h3><p>SPDY（读作“SPeeDY”）是Google开发的基于TCP的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。谷歌表示，引入SPDY协议后，在实验室测试中页面加载速度比原先快64%。SPDY使用TCP作为传输层，因此无需改变现有的网络设施。<br>具体技术目标：</p>
<ul>
<li>单个TCP连接支持并发的HTTP请求。</li>
<li>压缩报头和去掉不必要的头部来减少当前HTTP使用的带宽。</li>
<li>定义一个容易实现，在服务器端高效率的协议。通过减少边缘情况、定义易解析的消息格式来减少HTTP的复杂性。</li>
<li>强制使用SSL，让SSL协议在现存的网络设施下有更好的安全性和兼容性。</li>
<li>允许服务器在需要时发起对客户端的连接并推送数据。流是双向的，可以在客户端和服务器端启动。<br>SPDY旨在通过基本（始终启用）和高级（可选启用）功能实现更低的延迟。</li>
</ul>
<p>基本特征：</p>
<ul>
<li>复用流：SPDY允许在一个连接上无限制并发流。因为请求在一个通道上，TCP效率更高：更少的网络连接，发出更少更密集的数据包。</li>
<li>请求优先级：虽然无限的并发流解决了序列化的问题，但他们引入了另一个问题：如果带宽通道受限制， 客户端可能会因防止堵塞通道而阻止请求。为了克服这个问题，SPDY实行请求优先级：客户端从服务器端请求它希望的项目数量，并为每个请求分配一个优先级。这可以防止在网络通道被非关键资源堵塞时，高优先级的请求被挂起。</li>
</ul>
<h3 id="12-25号-周五"><a href="#12-25号-周五" class="headerlink" title="12/25号  周五"></a>12/25号  周五</h3><p>系统在调用startActivity()或者startActvityForResult()的时候，会默认为Intent加上“android.intent.category.DEFAULT”这个category，所以可以匹配Manifest文件中Activity中设置的intent-filter中的“android.intent.category.DEFAULT”。同时，也正因为如此，所以为了我们的Activity能够接受隐式调用，就必须在intent-filter中指定“android.intent.category.DEFAULT”这个category。所以一般mainactivity都是有这个category的。</p>
<h3 id="12-29号-周二"><a href="#12-29号-周二" class="headerlink" title="12/29号  周二"></a>12/29号  周二</h3><p>WAKE_LOCK几种状态：</p>
<p>PARTIAL_WAKE_LOCK:保持CPU 运转，屏幕和键盘灯有可能是关闭的。</p>
<p>SCREEN_DIM_WAKE_LOCK：保持CPU 运转，允许保持屏幕显示但有可能是灰的，允许关闭键盘灯</p>
<p>SCREEN_BRIGHT_WAKE_LOCK：保持CPU 运转，允许保持屏幕高亮显示，允许关闭键盘灯</p>
<p>FULL_WAKE_LOCK：保持CPU 运转，保持屏幕高亮显示，键盘灯也保持亮度</p>
<p>ACQUIRE_CAUSES_WAKEUP：强制使屏幕亮起，这种锁主要针对一些必须通知用户的操作.</p>
<p>ON_AFTER_RELEASE：当锁被释放时，保持屏幕亮起一段时间</p>
<p><a href="http://blog.csdn.net/arui319/article/details/7953690" target="_blank" rel="external">http://blog.csdn.net/arui319/article/details/7953690</a></p>
<p>经验分享：<br>Android手机的用户，根据习惯不同，可能会有两种方式退出整个应用程序：一种是按Home键直接退到桌面；另一种是从应用程序的退出按钮或者按Back键退出程序。那么从系统的角度来说，这两种方式有什么区别呢？按Home键，应用程序并没有被关闭，而是成为了后台应用程序。按Back键，一般来说，应用程序关闭了，但是进程并没有被杀死，而是成为了空进程（程序本身对退出做了特殊处理的不考虑在内）。<br>Android系统已经做了大量进程管理的工作，这些已经可以满足用户的需求。个人建议，应用程序在退出应用的时候不需要手动杀死自己所在的进程。对于应用程序本身的进程管理，交给Android系统来处理就可以了。应用程序需要做的，是尽量做好程序本身的内存管理工作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先判断是否已经回收</span></div><div class="line"><span class="keyword">if</span>(bitmap != <span class="keyword">null</span> &amp;&amp; !bitmap.isRecycled())&#123; </div><div class="line">        <span class="comment">// 回收并且置为null</span></div><div class="line">        bitmap.recycle(); </div><div class="line">        bitmap = <span class="keyword">null</span>; </div><div class="line">&#125; </div><div class="line">System.gc();</div></pre></td></tr></table></figure></p>
<p>从上面的代码可以看到，bitmap.recycle()方法用于回收该Bitmap所占用的内存，接着将bitmap置空，最后使用System.gc()调用一下系统的垃圾回收器进行回收，可以通知垃圾回收器尽快进行回收。这里需要注意的是，调用System.gc()并不能保证立即开始进行回收过程，而只是为了加快回收的到来。<br>如何调用recycle()方法进行回收已经了解了，那什么时候释放Bitmap的内存比较合适呢？一般来说，如果代码已经不再需要使用Bitmap对象了，就可以释放了。释放内存以后，就不能再使用该Bitmap对象了，如果再次使用，就会抛出异常。所以一定要保证不再使用的时候释放。比如，如果是在某个Activity中使用Bitmap，就可以在Activity的onStop()或者onDestroy()方法中进行回收。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  很多开发者会习惯性的在代码中直接捕获Exception。但是对于OutOfMemoryError来说，这样做是捕获不到的。因为OutOfMemoryError是一种Error，而不是Exception。在此仅仅做一下提醒，避免写错代码而捕获不到OutOfMemoryError。</span></div><div class="line">**/</div><div class="line">Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 实例化Bitmap</span></div><div class="line">    bitmap = BitmapFactory.decodeFile(path);</div><div class="line">&#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</div><div class="line">    <span class="comment">//注意捕获的是error</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// 如果实例化失败 返回默认的Bitmap对象</span></div><div class="line">    <span class="keyword">return</span> defaultBitmapMap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有时候，可能需要在一个Activity里多次用到同一张图片。比如一个Activity会展示一些用户的头像列表，而如果用户没有设置头像的话，则会显示一个默认头像，而这个头像是位于应用程序本身的资源文件中的。<br>如果有类似上面的场景，就可以对同一Bitmap进行缓存。如果不进行缓存，尽管看到的是同一张图片文件，但是使用BitmapFactory类的方法来实例化出来的Bitmap，是不同的Bitmap对象。缓存可以避免新建多个Bitmap对象，避免内存的浪费。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12-16号-周三&quot;&gt;&lt;a href=&quot;#12-16号-周三&quot; class=&quot;headerlink&quot; title=&quot;12/16号  周三&quot;&gt;&lt;/a&gt;12/16号  周三&lt;/h3&gt;&lt;p&gt;最近刚换了studio+git。&lt;/p&gt;
&lt;p&gt;//检出 本地仓库&lt;br&gt;git clone /path/to/repository&lt;br&gt;//远程,例如：&lt;br&gt;git clone username@host:/path/to/repository&lt;br&gt;git clone android_git@10.96.111.11:/data/android/git/demo_android.git &lt;/p&gt;
    
    </summary>
    
      <category term="随想回忆录" scheme="http://jijiaxin89.com/categories/%E9%9A%8F%E6%83%B3%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
      <category term="随想" scheme="http://jijiaxin89.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio快捷键(只记有用的)</title>
    <link href="http://jijiaxin89.com/2015/12/10/Android-Studio%E5%BF%AB%E6%8D%B7%E9%94%AE-%E5%8F%AA%E8%AE%B0%E6%9C%89%E7%94%A8%E7%9A%84/"/>
    <id>http://jijiaxin89.com/2015/12/10/Android-Studio快捷键-只记有用的/</id>
    <published>2015-12-10T01:49:17.000Z</published>
    <updated>2017-03-15T16:50:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚换了Studio，虽然有导入eclipse快捷键的功能，但是还是没选择使用，一是担心直接导入会有水土不服引来不必要的麻烦，二是了解一下原生的快捷键也是有通用性上的好处。毕竟是习惯了Android碎片化摧残的人了，这点差异不是事。<br>借此汇总一下有用的快捷键，留作备忘。并且只记录有用的。</p>
<ul>
<li>Shift+F12   对应于 eclipse中的Ctrl+O.  这应该是开发中的王牌快键键 <strong>查看类的方法结构</strong>，基本每天都需要使用几千次。</li>
<li>连按两次Shift   对应于 eclipse中的Ctrl+Shift+T和Ctrl+Shift+R <strong>快捷搜索键</strong>，快速搜索想要定位的文件，仅次于王牌快捷键的存在。</li>
<li>Ctrl+Y    <strong>删除行</strong>  这个可能有些人并不知道，而用Ctrl+X剪切期待，还是赶紧用这个纯粹的删除行快捷键吧。</li>
<li>Ctrl+Alt+L    <strong>格式化代码</strong>  不虚赘言，金牌按键，coding完不格式化代码的程序员都是流氓。</li>
<li>Alt+Shift+Up/Down   <strong>上下移动代码</strong>，不多说，金牌收好。</li>
<li>Ctrl+O   <strong>快捷复写方法</strong>  写个生命周期方法什么的，天天用。</li>
<li>Ctrl+Alt+T   <strong>生成快捷结构体</strong>  ifelse trycatch，毛毛雨啦</li>
<li>Ctrl+Shift+Plus/Minus   <strong>折叠展开全部代码块</strong></li>
<li>Ctrl+Plus/Minus   <strong>折叠展开代码块</strong></li>
<li>Ctrl+Alt+H   <strong>查找调用的位置</strong> 梦里寻他千百度。</li>
<li>Ctrl+Shift+U   <strong>大写小转换</strong></li>
<li>Alt+F7  <strong>查找一个类在哪被用到了</strong></li>
<li>Ctrl+alt+B 查看一个接口方法的实现方法，Ctrl+B查看一个接口方法的使用</li>
</ul>
<a id="more"></a>
<ul>
<li>Ctrl+F4  <strong>关闭当前页</strong><br>肆意补充</li>
<li>Ctrl+shift+i   不离开当前文件当前类的情况下快速查看某个方法或者类的实现。</li>
<li>F11 加书签 Shift+F11 显示书签 谁用谁知道</li>
<li>Ctrl+shift+a  对于没有设置快捷键或者忘记快捷键的菜单或者动作（Action），可能通过输入其名字快速调用。神技！！ </li>
<li>ctrl+p 在调用一些方法的时候免不了会忘记或者不知道此方法需要哪些参数。ctrl+p可以显示出此方法需要的参数。必备技能之一。</li>
<li>Alt+J 选择多行编辑</li>
<li>使用方法：按住Alt加鼠标左键拉框即可</li>
</ul>
<p>设置相关：<br>studio默认的代码折叠很不喜欢，每次看都不方便，我更喜欢用Shift+F12看类的结构，所以果断关闭：<br>File–&gt;Settings–&gt;Editor–&gt;General–&gt;Code Folding–&gt;One-line methods &amp;&amp;”Closures”(anonymous classes implementing one method,before java 8 &amp;&amp; Generic constructor and method parameters)</p>
<p>暂时先这么多，都是有身份证的快捷键，后续再补充一点使用平率没那么高的快捷键。</p>
<p>另外有个Studio的奇技淫巧的视频，等抽时间看一看。<br><a href="https://www.youtube.com/watch?v=Y2GC6P5hPeA" target="_blank" rel="external">https://www.youtube.com/watch?v=Y2GC6P5hPeA</a><br>针对这个视频，有人的总结：<br><a href="http://www.jianshu.com/p/c873441be31e" target="_blank" rel="external">http://www.jianshu.com/p/c873441be31e</a></p>
<p><a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="external">很全</a><br><a href="http://zlv.me/posts/2015/07/13/14_android-studio-tips/" target="_blank" rel="external">很赞</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刚换了Studio，虽然有导入eclipse快捷键的功能，但是还是没选择使用，一是担心直接导入会有水土不服引来不必要的麻烦，二是了解一下原生的快捷键也是有通用性上的好处。毕竟是习惯了Android碎片化摧残的人了，这点差异不是事。&lt;br&gt;借此汇总一下有用的快捷键，留作备忘。并且只记录有用的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shift+F12   对应于 eclipse中的Ctrl+O.  这应该是开发中的王牌快键键 &lt;strong&gt;查看类的方法结构&lt;/strong&gt;，基本每天都需要使用几千次。&lt;/li&gt;
&lt;li&gt;连按两次Shift   对应于 eclipse中的Ctrl+Shift+T和Ctrl+Shift+R &lt;strong&gt;快捷搜索键&lt;/strong&gt;，快速搜索想要定位的文件，仅次于王牌快捷键的存在。&lt;/li&gt;
&lt;li&gt;Ctrl+Y    &lt;strong&gt;删除行&lt;/strong&gt;  这个可能有些人并不知道，而用Ctrl+X剪切期待，还是赶紧用这个纯粹的删除行快捷键吧。&lt;/li&gt;
&lt;li&gt;Ctrl+Alt+L    &lt;strong&gt;格式化代码&lt;/strong&gt;  不虚赘言，金牌按键，coding完不格式化代码的程序员都是流氓。&lt;/li&gt;
&lt;li&gt;Alt+Shift+Up/Down   &lt;strong&gt;上下移动代码&lt;/strong&gt;，不多说，金牌收好。&lt;/li&gt;
&lt;li&gt;Ctrl+O   &lt;strong&gt;快捷复写方法&lt;/strong&gt;  写个生命周期方法什么的，天天用。&lt;/li&gt;
&lt;li&gt;Ctrl+Alt+T   &lt;strong&gt;生成快捷结构体&lt;/strong&gt;  ifelse trycatch，毛毛雨啦&lt;/li&gt;
&lt;li&gt;Ctrl+Shift+Plus/Minus   &lt;strong&gt;折叠展开全部代码块&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ctrl+Plus/Minus   &lt;strong&gt;折叠展开代码块&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ctrl+Alt+H   &lt;strong&gt;查找调用的位置&lt;/strong&gt; 梦里寻他千百度。&lt;/li&gt;
&lt;li&gt;Ctrl+Shift+U   &lt;strong&gt;大写小转换&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Alt+F7  &lt;strong&gt;查找一个类在哪被用到了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ctrl+alt+B 查看一个接口方法的实现方法，Ctrl+B查看一个接口方法的使用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android技术小栈" scheme="http://jijiaxin89.com/categories/Android%E6%8A%80%E6%9C%AF%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Android热补丁技术总结(草稿未完)</title>
    <link href="http://jijiaxin89.com/2015/12/02/Android%E7%83%AD%E8%A1%A5%E4%B8%81%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://jijiaxin89.com/2015/12/02/Android热补丁技术总结/</id>
    <published>2015-12-02T10:32:19.000Z</published>
    <updated>2017-03-15T16:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于热修复"><a href="#关于热修复" class="headerlink" title="关于热修复"></a>关于热修复</h3><h4 id="DEX分包"><a href="#DEX分包" class="headerlink" title="DEX分包"></a>DEX分包</h4><p>ClassLoader方案基于的是android dex分包方案的</p>
<h5 id="方法数天花板"><a href="#方法数天花板" class="headerlink" title="方法数天花板"></a>方法数天花板</h5><p>方法数量过多，编译时出错，提示：<br>Conversion to Dalvik format failed:Unable to execute dex: method ID not in [0, 0xffff]: 65536<br>原因：因为在Dalvik指令集里，调用方法的invoke-kind指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。<br>This number is significant in that it represents the total number of references that can be invoked by the code within a single Dalvik Executable (dex) bytecode file. </p>
<h6 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h6><p>解决方案：使用的最多的是插件化，即将一些独立的功能做成一个单独的apk，当打开的时候使用DexClassLoader动态加载，然后使用反射机制来调用插件中的类和方法。<br>方案弊病：1.插件化只适合一些比较独立的模块；2.必须通过反射机制去调用插件的类和方法，因此，必须搭配一套插件框架来配合使用；<br><a id="more"></a></p>
<h6 id="dex分包"><a href="#dex分包" class="headerlink" title="dex分包"></a>dex分包</h6><p>替代方案：dex分包的解决方案。<br>原理：将编译好的class文件拆分打包成两个dex，绕过dex方法数量的限制以及安装时的检查，在运行时再动态加载第二个dex文件中。<br>方案详情：除了第一个dex文件（即正常apk包唯一包含的Dex文件），其它dex文件都以资源的方式放在安装包中，并在Application的onCreate回调中被注入到系统的ClassLoader。因此，对于那些在注入之前已经引用到的类（以及它们所在的jar）,必须放入第一个Dex文件中。<br>关于 classloader<br>classloader的子类BaseDexClassLoader,BaseDexClassLoader的子类有DexClassLoader和PathClassLoader。</p>
<ol>
<li>关于PathClassLoader，文档中写到： Android uses this class for its system class loader and for its application class loader(s),<br>由此可知，Android应用就是用它来加载;</li>
<li>DexClass可以加载apk,jar,及dex文件，但PathClassLoader只能加载已安装到系统中（即/data/app目录下）的apk文件。</li>
</ol>
<p>注意：1.由于第二个dex包是在Application的onCreate中动态注入的，如果dex包过大，会使app的启动速度变慢，因此，在dex分包过程中一定要注意，第二个dex包不宜过大。<br>    2.由于上述第一点的限制，假如我们的app越来越臃肿和庞大，往往会采取dex分包方案和插件化方案配合使用，将一些非核心独立功能做成插件加载，核心功能再分包加载。</p>
<h4 id="关于DEX包加载时机"><a href="#关于DEX包加载时机" class="headerlink" title="关于DEX包加载时机"></a>关于DEX包加载时机</h4><p>一般把Service、Receiver、Provider涉及到的代码都放到Main DEX中，而把Activity涉及到的代码进行了一定的拆分，把首页Activity、Laucher Activity、欢迎页的Activity、城市列表页Activity等所依赖的class放到了Main DEX中，把二级、三级页面的Activity以及业务频道的代码放到了Secondary DEX中。<br>Activity是由ActivityThread 通过Instrumentation来启动的，我们是否可以在Instrumentation中做一定的手脚呢？通过分析代码ActivityThread和Instrumentation发现，Instrumentation有关Activity启动相关的方法大概有：execStartActivity、newActivity等等，这样我们就可以在这些方法中添加代码逻辑进行判断这个Class是否加载了，如果加载则直接启动这个Activity，如果没有加载完成则启动一个等待的Activity显示给用户，然后在这个Activity中等待后台Secondary DEX加载完成，完成后自动跳转到用户实际要跳转的Activity。</p>
<h4 id="ClassLoader方案-（腾讯空间）（此方案为最优方案-重点研究）"><a href="#ClassLoader方案-（腾讯空间）（此方案为最优方案-重点研究）" class="headerlink" title="ClassLoader方案 （腾讯空间）（此方案为最优方案,重点研究）"></a>ClassLoader方案 （腾讯空间）（此方案为最优方案,重点研究）</h4><p>ClassLoader方案支持2.3-6.0，会对启动速度略微有影响，只能在下一次应用启动时生效，在空间中已经有了较长时间的线上应用，如果可以接受在下次启动才应用补丁，是很好的选择。</p>
<p>我们知道，multidex方案的实现，其实就是把多个dex放进app的classloader之中，从而使得所有dex的类都能被找到。热修复原理是类似的，补丁就是一个dex文件，只是让补丁先被加载，就达到了替换的效果。<br>此方案开源实现有：Nuwa, HotFix, DroidFix。</p>
<p><a href="http://static.oschina.net/uploads/img/201409/01094253_Ta85.jpg" target="_blank" rel="external">ClassLoader</a></p>
<h5 id="相关的代码"><a href="#相关的代码" class="headerlink" title="相关的代码:"></a>相关的代码:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//BaseDexClassLoader</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">    Class clazz = pathList.findClass(name);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> clazz;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DexPathList</span></div><div class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Element element : dexElements) &#123;</div><div class="line">        DexFile dex = element.dexFile;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</div><div class="line">            Class clazz = dex.loadClassBinaryName(name, definingContext);</div><div class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> clazz;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// DexFile</span></div><div class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">loadClassBinaryName</span><span class="params">(String name, ClassLoader loader)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> defineClass(name, loader, mCookie);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> Class <span class="title">defineClass</span><span class="params">(String name, ClassLoader loader, <span class="keyword">int</span> cookie)</span></span>;</div></pre></td></tr></table></figure>
<p>BaseDexClassLoader中有个pathList对象，pathList中包含一个DexFile的集合dexElements，而对于类加载呢，就是遍历这个集合，通过DexFile去寻找。<br>即：一个ClassLoader可以包含多个dex文件，每个dex文件是一个Element，多个dex文件排列成一个有序的数组dexElements，当找类的时候，会按顺序遍历dex文件，然后从当前遍历的dex文件中找类，如果找类则返回，如果找不到从下一个dex文件继续查找。<br>这样就可以，在这个dexElements中去做一些事情，比如，在这个数组的第一个元素放置我们的patch.jar，里面包含修复过的类，这样的话，当遍历findClass的时候，我们修复的类就会被查找到，从而替代有bug的类。</p>
<h5 id="CLASS-ISPREVERIFIED的问题"><a href="#CLASS-ISPREVERIFIED的问题" class="headerlink" title="CLASS_ISPREVERIFIED的问题"></a>CLASS_ISPREVERIFIED的问题</h5><p>当一个apk在安装的时候，apk中的classes.dex会被虚拟机(dexopt)优化成odex文件，然后才会拿去执行。<br>虚拟机在启动的时候，会有许多的启动参数，其中一项就是verify选项，当verify选项被打开的时候，就会执行dvmVerifyClass进行类的校验，如果dvmVerifyClass校验类成功，那么这个类会被打上CLASS_ISPREVERIFIED的标志<br>怎么样算是校验类成功？如果static方法、private方法、构造函数等，其中的直接引用（第一层关系）到的类都在同一个dex文件中，那么该类就会被打上CLASS_ISPREVERIFIED标志。<br>我们要做的就是，阻止该类打上CLASS_ISPREVERIFIED的标志。否则加载其他dex的时候会报错。<br>注意下，是阻止引用者的类，也就是说，假设你的app里面有个类叫做LoadBugClass，再其内部引用了BugClass。发布过程中发现BugClass有编写错误，那么想要发布一个新的BugClass类，那么你就要阻止LoadBugClass这个类打上CLASS_ISPREVERIFIED的标志。<br>你在生成apk之前，就需要阻止相关类打上CLASS_ISPREVERIFIED的标志了。对于如何阻止，上面的文章说的很清楚，让LoadBugClass在构造方法中，去引用别的dex文件，比如：hack.dex中的某个类即可。<br>空间使用的是在字节码插入代码,而不是源代码插入，使用的是javaassist库来进行字节码插入的。</p>
<p>需要做的两件事：1、动态改变BaseDexClassLoader对象间接引用的dexElements；2、在app打包的时候，阻止相关类去打上CLASS_ISPREVERIFIED标志。</p>
<h4 id="Dexposed方案-（淘宝）"><a href="#Dexposed方案-（淘宝）" class="headerlink" title="Dexposed方案 （淘宝）"></a>Dexposed方案 （淘宝）</h4><p>基于Xposed的AOP框架，方法级粒度，可以进行AOP编程、插桩、热补丁、SDK hook等功能。<br>Xposed需要Root权限，是因为它要修改其他应用、系统的行为，而对单个应用来说，其实不需要root。<br> Xposed通过修改Android Dalvik运行时的Zygote进程，并使用Xposed Bridge来hook方法并注入自己的代码，实现非侵入式的runtime修改。<br>方法级的替换是指，可以在方法前、方法后插入代码，或者直接替换方法。只能针对java方法做拦截，不支持C的方法。<br>缺点：暂时还不支持art，不确定以后支持的时间点。<br>不支持Art模式（5.0+），且写补丁有点困难，需要反射写混淆后的代码，粒度太细，要替换的方法多的话，工作量会比较大。<br>如果线上release版本进行了混淆，那写patch也是一件很痛苦的事情，反射+内部类，可能还有包名和内部类的名字冲突，总而言之就是写得很痛苦。</p>
<h4 id="AndFix方案-（支付宝）"><a href="#AndFix方案-（支付宝）" class="headerlink" title="AndFix方案 （支付宝）"></a>AndFix方案 （支付宝）</h4><p>同样是方法的hook，AndFix不像Dexposed从Method入手，而是以Field为切入点。<br>使用上，直接写一个新的类，会由补丁工具会生成注解，描述其与要打补丁的类和方法的对应关系。<br>AndFix支持2.3-6.0，可能会有一些机型的坑在里面，毕竟jni层不像java层一样标准，从实现来说，方法类似Dexposed，都是通过jni来替换方法，但是实现上更简洁直接，应用patch不需要重启。但由于从实现上直接跳过了类初始化，设置为初始化完毕，所以像是静态函数、静态成员、构造函数都会出现问题，复杂点的类Class.forname很可能直接就会挂掉。</p>
<blockquote>
<p>总的来说，在兼容性稳定性上，ClassLoader方案很可靠，如果需要应用不重启就能修复，而且方法足够简单，可以使用AndFix，而Dexposed由于还不能支持art，所以只能暂时放弃，希望开发者们可以改进使它能支持art模式，毕竟xposed的种种能力还是很吸引人的（比如hook别人app的方法拿到解密后的数据，嘿嘿），还有比如无痕埋点啊线上追踪问题之类的，随时可以下掉。</p>
</blockquote>
<p>相关资料：<br><a href="http://blog.zhaiyifan.cn/2015/11/20/HotPatchCompare/" target="_blank" rel="external">http://blog.zhaiyifan.cn/2015/11/20/HotPatchCompare/</a><br><a href="http://my.oschina.net/853294317/blog/308583" target="_blank" rel="external">http://my.oschina.net/853294317/blog/308583</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/49883661" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/49883661</a><br><a href="https://github.com/dodola/HotFix" target="_blank" rel="external">https://github.com/dodola/HotFix</a><br>美团分包方案<a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">http://tech.meituan.com/mt-android-auto-split-dex.html</a><br>腾讯bugly博客<a href="http://bugly.qq.com/blog/?p=781" target="_blank" rel="external">http://bugly.qq.com/blog/?p=781</a><br>dex分包<a href="https://m.oschina.net/blog/308583" target="_blank" rel="external">https://m.oschina.net/blog/308583</a><br><a href="http://www.gitzx.com/android-inject-hook/" target="_blank" rel="external">Android下的挂钩(hook)和代码注入(inject)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于热修复&quot;&gt;&lt;a href=&quot;#关于热修复&quot; class=&quot;headerlink&quot; title=&quot;关于热修复&quot;&gt;&lt;/a&gt;关于热修复&lt;/h3&gt;&lt;h4 id=&quot;DEX分包&quot;&gt;&lt;a href=&quot;#DEX分包&quot; class=&quot;headerlink&quot; title=&quot;DEX分包&quot;&gt;&lt;/a&gt;DEX分包&lt;/h4&gt;&lt;p&gt;ClassLoader方案基于的是android dex分包方案的&lt;/p&gt;
&lt;h5 id=&quot;方法数天花板&quot;&gt;&lt;a href=&quot;#方法数天花板&quot; class=&quot;headerlink&quot; title=&quot;方法数天花板&quot;&gt;&lt;/a&gt;方法数天花板&lt;/h5&gt;&lt;p&gt;方法数量过多，编译时出错，提示：&lt;br&gt;Conversion to Dalvik format failed:Unable to execute dex: method ID not in [0, 0xffff]: 65536&lt;br&gt;原因：因为在Dalvik指令集里，调用方法的invoke-kind指令中，method reference index只给了16bits，最多能调用65535个方法，所以在生成dex文件的过程中，当方法数超过65535就会报错。&lt;br&gt;This number is significant in that it represents the total number of references that can be invoked by the code within a single Dalvik Executable (dex) bytecode file. &lt;/p&gt;
&lt;h6 id=&quot;插件化&quot;&gt;&lt;a href=&quot;#插件化&quot; class=&quot;headerlink&quot; title=&quot;插件化&quot;&gt;&lt;/a&gt;插件化&lt;/h6&gt;&lt;p&gt;解决方案：使用的最多的是插件化，即将一些独立的功能做成一个单独的apk，当打开的时候使用DexClassLoader动态加载，然后使用反射机制来调用插件中的类和方法。&lt;br&gt;方案弊病：1.插件化只适合一些比较独立的模块；2.必须通过反射机制去调用插件的类和方法，因此，必须搭配一套插件框架来配合使用；&lt;br&gt;
    
    </summary>
    
      <category term="Android技术小栈" scheme="http://jijiaxin89.com/categories/Android%E6%8A%80%E6%9C%AF%E5%B0%8F%E6%A0%88/"/>
    
    
      <category term="经验" scheme="http://jijiaxin89.com/tags/%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="Android栈" scheme="http://jijiaxin89.com/tags/Android%E6%A0%88/"/>
    
  </entry>
  
</feed>
